{"ast":null,"code":"import { v1 } from \"uuid\";\nimport { changePreloader } from \"./usersPageReducer\";\nimport { profileAPI } from \"../../API\";\nconst initialState = {\n  postsData: [{\n    id: v1(),\n    message: 'yo',\n    likeCount: 12\n  }, {\n    id: v1(),\n    message: 'yoyo',\n    likeCount: 212\n  }, {\n    id: v1(),\n    message: 'yoyo',\n    likeCount: 212\n  }],\n  userProfilePage: null,\n  preloader: false,\n  status: ''\n};\nexport const profilePageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SET-NEW-POST-CLICK\":\n      {\n        const post = {\n          id: v1(),\n          message: action.message,\n          likeCount: 0\n        };\n        return { ...state,\n          postsData: [post, ...state.postsData]\n        };\n      }\n\n    case \"SET-PROFILE-USER-DATA\":\n      {\n        return { ...state,\n          userProfilePage: action.data\n        };\n      }\n\n    case \"PRELOADER\":\n      {\n        return { ...state,\n          preloader: action.preloader\n        };\n      }\n\n    case \"GET-STATUS\":\n      {\n        console.log(action.status);\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    default:\n      {\n        return { ...state\n        };\n      }\n  }\n};\nexport const setNewPostClick = message => {\n  return {\n    type: 'SET-NEW-POST-CLICK',\n    message\n  };\n};\nexport const setProfileUserData = data => {\n  return {\n    type: 'SET-PROFILE-USER-DATA',\n    data\n  };\n};\nexport const setStatus = status => {\n  return {\n    type: 'GET-STATUS',\n    status\n  };\n};\nexport const thunkSetProfileUserData = param => async dispatch => {\n  dispatch(changePreloader(true));\n  let userId = param.match.params.userId;\n\n  if (!userId) {\n    userId = '16550';\n  }\n\n  profileAPI.setProfileUserData(userId).then(data => {\n    dispatch(changePreloader(false));\n    dispatch(setProfileUserData(data));\n  });\n};\nexport const thunkGETStatus = param => async dispatch => {\n  let userId = param.match.params.userId;\n\n  if (!userId) {\n    userId = '16550';\n  }\n\n  profileAPI.getProfileStatus(userId).then(data => {\n    dispatch(setStatus(data));\n  });\n};\nexport const thunkUpdateStatus = status => async dispatch => {\n  profileAPI.updateProfileStatus(status).then(data => {\n    if (data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  });\n};","map":{"version":3,"sources":["D:/It-inkubator/socset-na-ts/src/redux/reducer/profilePageReducer.ts"],"names":["v1","changePreloader","profileAPI","initialState","postsData","id","message","likeCount","userProfilePage","preloader","status","profilePageReducer","state","action","type","post","data","console","log","setNewPostClick","setProfileUserData","setStatus","thunkSetProfileUserData","param","dispatch","userId","match","params","then","thunkGETStatus","getProfileStatus","thunkUpdateStatus","updateProfileStatus","resultCode"],"mappings":"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","sourcesContent":["import {v1} from \"uuid\";\r\nimport {changePreloader, preloaderACType} from \"./usersPageReducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../storeRedux\";\r\nimport {profileAPI} from \"../../API\";\r\n\r\nexport type profilePageType = {\r\n    postsData: PostDataProps[]\r\n    userProfilePage: userProfilePageType | null\r\n    preloader: boolean\r\n    status: string\r\n}\r\nexport type PostDataProps = {\r\n    id: string\r\n    message: string\r\n    likeCount: number\r\n}\r\nexport type userProfilePageType = {\r\n    aboutMe: string | null\r\n    contacts: {\r\n        facebook: string | null\r\n        website: string | null\r\n        vk: string | null\r\n        twitter: string | null\r\n        instagram: string | null\r\n        youtube: string | null\r\n        github: string | null\r\n        mainLink: string | null\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string | undefined\r\n        large: string | undefined\r\n    }\r\n}\r\n\r\nconst initialState: profilePageType = {\r\n    postsData: [\r\n        {id: v1(), message: 'yo', likeCount: 12},\r\n        {id: v1(), message: 'yoyo', likeCount: 212},\r\n        {id: v1(), message: 'yoyo', likeCount: 212},\r\n    ],\r\n    userProfilePage: null,\r\n    preloader: false,\r\n    status: ''\r\n}\r\n\r\nexport const profilePageReducer = (state: profilePageType = initialState, action: generalType): profilePageType => {\r\n    switch (action.type) {\r\n        case \"SET-NEW-POST-CLICK\": {\r\n            const post = {id: v1(), message: action.message, likeCount: 0}\r\n            return {...state, postsData: [post, ...state.postsData]}\r\n        }\r\n        case \"SET-PROFILE-USER-DATA\": {\r\n            return {...state, userProfilePage: action.data}\r\n        }\r\n        case \"PRELOADER\": {\r\n            return {...state, preloader: action.preloader}\r\n        }\r\n        case \"GET-STATUS\": {\r\n            console.log(action.status)\r\n            return {...state, status: action.status}\r\n        }\r\n        default : {\r\n            return {...state}\r\n        }\r\n    }\r\n}\r\ntype generalType = setNewPostClickACType\r\n    | setProfileUserDataACType\r\n    | preloaderACType\r\n    | getStatusType\r\n    // | changeStatusType\r\n\r\ntype setNewPostClickACType = ReturnType<typeof setNewPostClick>\r\nexport const setNewPostClick = (message: string) => {\r\n    return {\r\n        type: 'SET-NEW-POST-CLICK',\r\n        message,\r\n    } as const\r\n}\r\n\r\ntype setProfileUserDataACType = ReturnType<typeof setProfileUserData>\r\nexport const setProfileUserData = (data: userProfilePageType) => {\r\n    return {\r\n        type: 'SET-PROFILE-USER-DATA',\r\n        data\r\n    } as const\r\n}\r\n\r\ntype getStatusType = ReturnType<typeof setStatus>\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: 'GET-STATUS',\r\n        status,\r\n    } as const\r\n}\r\n\r\n\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, generalType>\r\nexport const thunkSetProfileUserData = (param: any): ThunkActionType =>\r\n    async dispatch => {\r\n        dispatch(changePreloader(true))\r\n        let userId = param.match.params.userId\r\n        if (!userId) {\r\n            userId = '16550'\r\n        }\r\n        profileAPI.setProfileUserData(userId).then(data => {\r\n            dispatch(changePreloader(false))\r\n            dispatch(setProfileUserData(data))\r\n        })\r\n    }\r\nexport const thunkGETStatus = (param: any): ThunkActionType =>\r\n    async dispatch => {\r\n        let userId = param.match.params.userId\r\n        if (!userId) {\r\n            userId = '16550'\r\n        }\r\n        profileAPI.getProfileStatus(userId).then(data => {\r\n            dispatch(setStatus(data))\r\n        })\r\n    }\r\nexport const thunkUpdateStatus = (status: string): ThunkActionType =>\r\n    async dispatch => {\r\n        profileAPI.updateProfileStatus(status).then(data => {\r\n            if (data.resultCode===0){\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n    }\r\n\r\n"]},"metadata":{},"sourceType":"module"}