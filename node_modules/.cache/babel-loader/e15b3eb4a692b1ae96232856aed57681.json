{"ast":null,"code":"var _jsxFileName = \"D:\\\\It-inkubator\\\\socset-na-ts\\\\src\\\\components\\\\Login\\\\Login.tsx\";\nimport React from \"react\";\nimport { logInTC } from \"../../redux/reducer/authReducer\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport s from \"./Login.module.css\";\nconst Login = React.memo(_ref => {\n  let {\n    ThunkLogIn,\n    isAuth\n  } = _ref;\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n\n      if (values.password.length < 3) errors.password = 'The password is too short';\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(ThunkLogIn(values.email, values.password, values.rememberMe));\n    }\n  });\n  if (isAuth) return /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 24\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: s.allContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"LOGIN\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    id: 'email',\n    type: 'email',\n    placeholder: 'email'\n  }, formik.getFieldProps('email'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  })), formik.touched.email && formik.errors.email && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, formik.errors.email), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 73\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    id: 'password',\n    type: 'password',\n    placeholder: 'password'\n  }, formik.getFieldProps('password'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })), formik.touched.password && formik.errors.password && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, formik.errors.password), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 76\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    id: 'check',\n    type: 'checkbox',\n    checked: formik.values.rememberMe\n  }, formik.getFieldProps('rememberMe'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  })), \" \\u0417\\u0430\\u043F\\u043E\\u043C\\u043D\\u0438\\u0442\\u044C\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"\\u0412\\u043E\\u0439\\u0442\\u0438\")));\n}); //----------------------------------------connect\n\nconst pstp = state => {\n  return {\n    isAuth: state.login.isAuth\n  };\n};\n\nexport default connect(pstp, {\n  ThunkLogIn: logInTC\n})(Login); //type","map":{"version":3,"sources":["D:/It-inkubator/socset-na-ts/src/components/Login/Login.tsx"],"names":["React","logInTC","connect","useDispatch","Redirect","useFormik","s","Login","memo","ThunkLogIn","isAuth","dispatch","formik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","allContainer","handleSubmit","getFieldProps","touched","color","pstp","state","login"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {logInTC} from \"../../redux/reducer/authReducer\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {useFormik} from \"formik\";\r\nimport s from \"./Login.module.css\"\r\n\r\n\r\ntype LoginType = {\r\n    ThunkLogIn: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\ntype valuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\nconst Login: React.FC<LoginType> = React.memo(({ThunkLogIn, isAuth}) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length < 3) errors.password = 'The password is too short'\r\n            return errors;\r\n        },\r\n        onSubmit: (values: valuesType) => {\r\n            dispatch(ThunkLogIn(values.email, values.password, values.rememberMe))\r\n        },\r\n    })\r\n    if (isAuth) return <Redirect to='/profile'/>\r\n    return <div className={s.allContainer}>\r\n        <h1>LOGIN</h1>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <input id={'email'}\r\n                   type={'email'}\r\n                   placeholder={'email'}\r\n                   {...formik.getFieldProps('email')}/>\r\n            {formik.touched.email && formik.errors.email &&\r\n                <div style={{color: \"red\"}}>{formik.errors.email}</div>}<br/>\r\n            <input id={'password'}\r\n                   type={'password'}\r\n                   placeholder={'password'}\r\n                   {...formik.getFieldProps('password')}/>\r\n            {formik.touched.password && formik.errors.password &&\r\n                <div style={{color: \"red\"}}>{formik.errors.password}</div>}<br/>\r\n            <input id={'check'}\r\n                   type={'checkbox'}\r\n                   checked={formik.values.rememberMe}\r\n                   {...formik.getFieldProps('rememberMe')}\r\n            /> Запомнить<br/>\r\n            <button type={\"submit\"}>Войти</button>\r\n        </form>\r\n    </div>\r\n})\r\n\r\n\r\n//----------------------------------------connect\r\nconst pstp = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.login.isAuth\r\n    }\r\n}\r\nexport default connect(pstp, {ThunkLogIn: logInTC})(Login)\r\n\r\n//type\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n"]},"metadata":{},"sourceType":"module"}