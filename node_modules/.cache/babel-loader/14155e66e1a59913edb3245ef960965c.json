{"ast":null,"code":"import { authAPI } from '../../api/authApi';\nimport { errorResponse } from '../../utils/util-error';\nexport let enumAuthActionType;\n\n(function (enumAuthActionType) {\n  enumAuthActionType[\"setAuthData\"] = \"AUTH/PROFILE/SET-NEW-POST-CLICK\";\n})(enumAuthActionType || (enumAuthActionType = {}));\n\nconst initialState = {\n  id: 0,\n  email: '',\n  login: '',\n  isAuth: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case enumAuthActionType.setAuthData:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return { ...state\n      };\n  }\n}; //action\n\nexport const setAuthDataAC = data => {\n  return {\n    type: enumAuthActionType.setAuthData,\n    payload: { ...data\n    }\n  };\n}; //thunk\n\nexport const setAuthDataTC = () => async dispatch => {\n  try {} catch (e) {\n    errorResponse(e);\n  }\n\n  const res = await authAPI.setAuthData();\n  const {\n    id,\n    email,\n    login\n  } = res.data.data;\n  if (id) dispatch(setAuthDataAC({\n    id,\n    email,\n    login,\n    isAuth: true\n  }));\n  return 'aaa';\n};\nexport const logInTC = (email, password, rememberMe) => async dispatch => {\n  try {\n    const res = await authAPI.setLogin(email, password, rememberMe);\n    if (res.data.resultCode === 0) dispatch(setAuthDataTC());\n  } catch (e) {\n    errorResponse(e);\n  }\n};\nexport const logOutTC = () => async dispatch => {\n  try {\n    const res = await authAPI.outLogin();\n    if (res.data.resultCode === 0) dispatch(setAuthDataAC({\n      id: 0,\n      email: '',\n      login: '',\n      isAuth: false\n    }));\n  } catch (e) {\n    errorResponse(e);\n  }\n}; //type","map":{"version":3,"sources":["D:/It-inkubator/socset-na-ts/src/redux/reducer/authReducer.ts"],"names":["authAPI","errorResponse","enumAuthActionType","initialState","id","email","login","isAuth","authReducer","state","action","type","setAuthData","payload","setAuthDataAC","data","setAuthDataTC","dispatch","e","res","logInTC","password","rememberMe","setLogin","resultCode","logOutTC","outLogin"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,mBAAtB;AAEA,SAAQC,aAAR,QAA4B,wBAA5B;AAEA,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAIZ,MAAMC,YAAY,GAAG;AACjBC,EAAAA,EAAE,EAAE,CADa;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;AAOA,OAAO,MAAMC,WAAW,GAAG,YAAuF;AAAA,MAAtFC,KAAsF,uEAA5DN,YAA4D;AAAA,MAA9CO,MAA8C;;AAC9G,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,kBAAkB,CAACU,WAAxB;AACI,aAAO,EAAC,GAAGH,KAAJ;AAAW,WAAGC,MAAM,CAACG;AAArB,OAAP;;AACJ;AACI,aAAO,EAAC,GAAGJ;AAAJ,OAAP;AAJR;AAMH,CAPM,C,CASP;;AACA,OAAO,MAAMK,aAAa,GAAIC,IAAD,IAA4B;AACrD,SAAO;AACHJ,IAAAA,IAAI,EAAET,kBAAkB,CAACU,WADtB;AAEHC,IAAAA,OAAO,EAAE,EAAC,GAAGE;AAAJ;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAgB,MAAMC,QAAN,IAAkB;AAC3D,MAAI,CAEH,CAFD,CAEE,OAAOC,CAAP,EAAU;AACRjB,IAAAA,aAAa,CAACiB,CAAD,CAAb;AACH;;AACD,QAAMC,GAAG,GAAG,MAAMnB,OAAO,CAACY,WAAR,EAAlB;AACA,QAAM;AAACR,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA;AAAZ,MAAqBa,GAAG,CAACJ,IAAJ,CAASA,IAApC;AACA,MAAIX,EAAJ,EAAQa,QAAQ,CAACH,aAAa,CAAC;AAACV,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,MAAM,EAAE;AAA3B,GAAD,CAAd,CAAR;AACR,SAAO,KAAP;AACH,CAVM;AAWP,OAAO,MAAMa,OAAO,GAAG,CAACf,KAAD,EAAgBgB,QAAhB,EAAkCC,UAAlC,KACnB,MAAML,QAAN,IAAkB;AACd,MAAI;AACA,UAAME,GAAG,GAAG,MAAMnB,OAAO,CAACuB,QAAR,CAAiBlB,KAAjB,EAAwBgB,QAAxB,EAAkCC,UAAlC,CAAlB;AACA,QAAIH,GAAG,CAACJ,IAAJ,CAASS,UAAT,KAAwB,CAA5B,EAA+BP,QAAQ,CAACD,aAAa,EAAd,CAAR;AAClC,GAHD,CAGE,OAAOE,CAAP,EAAU;AACRjB,IAAAA,aAAa,CAACiB,CAAD,CAAb;AACH;AACJ,CARE;AASP,OAAO,MAAMO,QAAQ,GAAG,MAAgB,MAAMR,QAAN,IAAkB;AACtD,MAAI;AACA,UAAME,GAAG,GAAG,MAAMnB,OAAO,CAAC0B,QAAR,EAAlB;AACA,QAAIP,GAAG,CAACJ,IAAJ,CAASS,UAAT,KAAwB,CAA5B,EAA+BP,QAAQ,CAACH,aAAa,CAAC;AAACV,MAAAA,EAAE,EAAE,CAAL;AAAQC,MAAAA,KAAK,EAAE,EAAf;AAAmBC,MAAAA,KAAK,EAAE,EAA1B;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KAAD,CAAd,CAAR;AAClC,GAHD,CAGE,OAAOW,CAAP,EAAU;AACRjB,IAAAA,aAAa,CAACiB,CAAD,CAAb;AACH;AACJ,CAPM,C,CASP","sourcesContent":["import {authAPI} from '../../api/authApi';\r\nimport {AppThunk} from '../store';\r\nimport {errorResponse} from '../../utils/util-error';\r\n\r\nexport enum enumAuthActionType {\r\n    setAuthData = 'AUTH/PROFILE/SET-NEW-POST-CLICK',\r\n}\r\n\r\nconst initialState = {\r\n    id: 0,\r\n    email: '',\r\n    login: '',\r\n    isAuth: false,\r\n}\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: LoginActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case enumAuthActionType.setAuthData:\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//action\r\nexport const setAuthDataAC = (data: initialStateType) => {\r\n    return {\r\n        type: enumAuthActionType.setAuthData,\r\n        payload: {...data}\r\n    }\r\n}\r\n\r\n//thunk\r\nexport const setAuthDataTC = (): AppThunk => async dispatch => {\r\n    try {\r\n\r\n    } catch (e) {\r\n        errorResponse(e)\r\n    }\r\n    const res = await authAPI.setAuthData()\r\n    const {id, email, login} = res.data.data\r\n    if (id) dispatch(setAuthDataAC({id, email, login, isAuth: true}))\r\n    return 'aaa'\r\n}\r\nexport const logInTC = (email: string, password: string, rememberMe: boolean): AppThunk =>\r\n    async dispatch => {\r\n        try {\r\n            const res = await authAPI.setLogin(email, password, rememberMe)\r\n            if (res.data.resultCode === 0) dispatch(setAuthDataTC())\r\n        } catch (e) {\r\n            errorResponse(e)\r\n        }\r\n    }\r\nexport const logOutTC = (): AppThunk => async dispatch => {\r\n    try {\r\n        const res = await authAPI.outLogin()\r\n        if (res.data.resultCode === 0) dispatch(setAuthDataAC({id: 0, email: '', login: '', isAuth: false}))\r\n    } catch (e) {\r\n        errorResponse(e)\r\n    }\r\n}\r\n\r\n//type\r\ntype initialStateType = typeof initialState\r\nexport type LoginActionType = ReturnType<typeof setAuthDataAC>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}