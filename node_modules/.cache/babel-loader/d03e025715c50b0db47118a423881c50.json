{"ast":null,"code":"var _jsxFileName = \"D:\\\\It-inkubator\\\\socset-na-ts\\\\src\\\\components\\\\Login\\\\LoginFormik.tsx\";\nimport React from \"react\";\nimport { logInTC } from \"../../redux/reducer/authReducer\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\n\nconst LoginFormik = _ref => {\n  let {\n    ThunkLogIn,\n    isAuth\n  } = _ref;\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      check: false\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n\n      if (values.password.length < 3) errors.password = 'The password is too short';\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(ThunkLogIn(values.email, values.password, values.check));\n    }\n  });\n  if (isAuth) return /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 24\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"LOGIN\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: 'email',\n    name: 'email',\n    type: 'email',\n    placeholder: 'email',\n    onChange: formik.handleChange,\n    value: formik.values.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 50\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: 'password',\n    name: 'password',\n    type: 'password',\n    placeholder: 'password',\n    onChange: formik.handleChange,\n    value: formik.values.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 52\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: 'check',\n    name: 'check',\n    type: 'checkbox',\n    onChange: formik.handleChange,\n    checked: formik.values.check,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), \" \\u0417\\u0430\\u043F\\u043E\\u043C\\u043D\\u0438\\u0442\\u044C\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 61\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"\\u0412\\u043E\\u0439\\u0442\\u0438\")));\n}; //----------------------------------------connect\n\n\nconst pstp = state => {\n  return {\n    isAuth: state.login.isAuth\n  };\n};\n\nexport default connect(pstp, {\n  ThunkLogIn: logInTC\n})(LoginFormik);","map":{"version":3,"sources":["D:/It-inkubator/socset-na-ts/src/components/Login/LoginFormik.tsx"],"names":["React","logInTC","connect","useDispatch","Redirect","useFormik","LoginFormik","ThunkLogIn","isAuth","dispatch","formik","initialValues","email","password","check","validate","values","errors","test","length","onSubmit","handleSubmit","handleChange","pstp","state","login"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,iCAAtB;AACA,SAAQC,OAAR,EAAiBC,WAAjB,QAAmC,aAAnC;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AAEA,SAAQC,SAAR,QAAwB,QAAxB;;AAaA,MAAMC,WAAgC,GAAG,QAA0B;AAAA,MAAzB;AAACC,IAAAA,UAAD;AAAaC,IAAAA;AAAb,GAAyB;AAC/D,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,MAAM,GAAGL,SAAS,CAAC;AACrBM,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,KAAK,EAAE;AAHI,KADM;AAMrBC,IAAAA,QAAQ,EAAGC,MAAD,IAAY;AAClB,YAAMC,MAAuB,GAAG,EAAhC;;AACA,UAAI,CAACD,MAAM,CAACJ,KAAZ,EAAmB;AACfK,QAAAA,MAAM,CAACL,KAAP,GAAe,UAAf;AACH,OAFD,MAEO,IAAI,CAAC,4CAA4CM,IAA5C,CAAiDF,MAAM,CAACJ,KAAxD,CAAL,EAAqE;AACxEK,QAAAA,MAAM,CAACL,KAAP,GAAe,uBAAf;AACH;;AACD,UAAII,MAAM,CAACH,QAAP,CAAgBM,MAAhB,GAAyB,CAA7B,EAAgCF,MAAM,CAACJ,QAAP,GAAkB,2BAAlB;AAChC,aAAOI,MAAP;AACH,KAfoB;AAgBrBG,IAAAA,QAAQ,EAAGJ,MAAD,IAAwB;AAC9BP,MAAAA,QAAQ,CAACF,UAAU,CAACS,MAAM,CAACJ,KAAR,EAAeI,MAAM,CAACH,QAAtB,EAAgCG,MAAM,CAACF,KAAvC,CAAX,CAAR;AACH;AAlBoB,GAAD,CAAxB;AAoBA,MAAIN,MAAJ,EAAY,oBAAO,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACZ,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADG,eAEH;AAAM,IAAA,QAAQ,EAAEE,MAAM,CAACW,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,EAAE,EAAE,OAAX;AACO,IAAA,IAAI,EAAE,OADb;AAEO,IAAA,IAAI,EAAE,OAFb;AAGO,IAAA,WAAW,EAAE,OAHpB;AAIO,IAAA,QAAQ,EAAEX,MAAM,CAACY,YAJxB;AAKO,IAAA,KAAK,EAAEZ,MAAM,CAACM,MAAP,CAAcJ,KAL5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,oBAMyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANzC,eAOI;AAAO,IAAA,EAAE,EAAE,UAAX;AACO,IAAA,IAAI,EAAE,UADb;AAEO,IAAA,IAAI,EAAE,UAFb;AAGO,IAAA,WAAW,EAAE,UAHpB;AAIO,IAAA,QAAQ,EAAEF,MAAM,CAACY,YAJxB;AAKO,IAAA,KAAK,EAAEZ,MAAM,CAACM,MAAP,CAAcH,QAL5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,eAY2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZ3C,eAaI;AAAO,IAAA,EAAE,EAAE,OAAX;AACO,IAAA,IAAI,EAAE,OADb;AAEO,IAAA,IAAI,EAAE,UAFb;AAGO,IAAA,QAAQ,EAAEH,MAAM,CAACY,YAHxB;AAIO,IAAA,OAAO,EAAEZ,MAAM,CAACM,MAAP,CAAcF,KAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,0EAiBoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBpD,eAkBI;AAAQ,IAAA,IAAI,EAAE,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAlBJ,CAFG,CAAP;AAuBH,CA9CD,C,CAiDA;;;AACA,MAAMS,IAAI,GAAIC,KAAD,IAA6B;AACtC,SAAO;AACHhB,IAAAA,MAAM,EAAEgB,KAAK,CAACC,KAAN,CAAYjB;AADjB,GAAP;AAGH,CAJD;;AAKA,eAAeN,OAAO,CAACqB,IAAD,EAAO;AAAChB,EAAAA,UAAU,EAAEN;AAAb,CAAP,CAAP,CAAqCK,WAArC,CAAf","sourcesContent":["import React from \"react\";\r\nimport {logInTC} from \"../../redux/reducer/authReducer\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\ntype LoginType = {\r\n    ThunkLogIn: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\ntype valuesType = {\r\n    email: string,\r\n    password: string,\r\n    check: boolean\r\n}\r\nconst LoginFormik: React.FC<LoginType> = ({ThunkLogIn, isAuth}) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            check: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length < 3) errors.password = 'The password is too short'\r\n            return errors;\r\n        },\r\n        onSubmit: (values: valuesType) => {\r\n            dispatch(ThunkLogIn(values.email, values.password, values.check))\r\n        },\r\n    })\r\n    if (isAuth) return <Redirect to='/profile'/>\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <input id={'email'}\r\n                   name={'email'}\r\n                   type={'email'}\r\n                   placeholder={'email'}\r\n                   onChange={formik.handleChange}\r\n                   value={formik.values.email}/> <br/>\r\n            <input id={'password'}\r\n                   name={'password'}\r\n                   type={'password'}\r\n                   placeholder={'password'}\r\n                   onChange={formik.handleChange}\r\n                   value={formik.values.password}/><br/>\r\n            <input id={'check'}\r\n                   name={'check'}\r\n                   type={'checkbox'}\r\n                   onChange={formik.handleChange}\r\n                   checked={formik.values.check}/> Запомнить<br/>\r\n            <button type={\"submit\"}>Войти</button>\r\n        </form>\r\n    </div>\r\n}\r\n\r\n\r\n//----------------------------------------connect\r\nconst pstp = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.login.isAuth\r\n    }\r\n}\r\nexport default connect(pstp, {ThunkLogIn: logInTC})(LoginFormik)\r\n"]},"metadata":{},"sourceType":"module"}