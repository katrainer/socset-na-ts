{"ast":null,"code":"import { headerAPI, loginAPI } from \"../../API\";\nexport let enumAuthActionType;\n\n(function (enumAuthActionType) {\n  enumAuthActionType[\"setAuthData\"] = \"AUTH/PROFILE/SET-NEW-POST-CLICK\";\n})(enumAuthActionType || (enumAuthActionType = {}));\n\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case enumAuthActionType.setAuthData:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return { ...state\n      };\n  }\n}; //action\n\nexport const setAuthDataAC = data => {\n  return {\n    type: enumAuthActionType.setAuthData,\n    payload: { ...data\n    }\n  };\n}; //thunk\n\nexport const setAuthDataTC = () => async dispatch => {\n  const res = await headerAPI.setAuthData();\n  const {\n    id,\n    email,\n    login\n  } = res.data.data;\n  if (id) dispatch(setAuthDataAC({\n    id,\n    email,\n    login,\n    isAuth: true\n  }));\n};\nexport const logInTC = (email, password, rememberMe) => async dispatch => {\n  const res = await loginAPI.setLogin(email, password, rememberMe);\n  if (res.data.resultCode === 0) dispatch(setAuthDataTC());\n};\nexport const logOutTC = () => dispatch => {\n  loginAPI.outLogin().then(data => {\n    if (data.resultCode === 0) {\n      dispatch(setAuthDataAC({\n        id: null,\n        email: null,\n        login: null,\n        isAuth: false\n      }));\n    }\n  });\n}; //type","map":{"version":3,"sources":["D:/It-inkubator/socset-na-ts/src/redux/reducer/authReducer.ts"],"names":["headerAPI","loginAPI","enumAuthActionType","initialState","id","email","login","isAuth","authReducer","state","action","type","setAuthData","payload","setAuthDataAC","data","setAuthDataTC","dispatch","res","logInTC","password","rememberMe","setLogin","resultCode","logOutTC","outLogin","then"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,WAAlC;AAGA,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAIZ,MAAMC,YAA6B,GAAG;AAClCC,EAAAA,EAAE,EAAE,IAD8B;AAElCC,EAAAA,KAAK,EAAE,IAF2B;AAGlCC,EAAAA,KAAK,EAAE,IAH2B;AAIlCC,EAAAA,MAAM,EAAE;AAJ0B,CAAtC;AAOA,OAAO,MAAMC,WAAW,GAAG,YAAqF;AAAA,MAApFC,KAAoF,uEAA3DN,YAA2D;AAAA,MAA7CO,MAA6C;;AAC5G,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,kBAAkB,CAACU,WAAxB;AACI,aAAO,EAAC,GAAGH,KAAJ;AAAW,WAAGC,MAAM,CAACG;AAArB,OAAP;;AACJ;AACI,aAAO,EAAC,GAAGJ;AAAJ,OAAP;AAJR;AAMH,CAPM,C,CASP;;AACA,OAAO,MAAMK,aAAa,GAAIC,IAAD,IAA2B;AACpD,SAAO;AACHJ,IAAAA,IAAI,EAAET,kBAAkB,CAACU,WADtB;AAEHC,IAAAA,OAAO,EAAE,EAAC,GAAGE;AAAJ;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAgB,MAAOC,QAAP,IAAoB;AAC7D,QAAMC,GAAG,GAAG,MAAMlB,SAAS,CAACY,WAAV,EAAlB;AACA,QAAM;AAACR,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA;AAAZ,MAAqBY,GAAG,CAACH,IAAJ,CAASA,IAApC;AACA,MAAIX,EAAJ,EAAQa,QAAQ,CAACH,aAAa,CAAC;AAACV,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,MAAM,EAAE;AAA3B,GAAD,CAAd,CAAR;AACX,CAJM;AAKP,OAAO,MAAMY,OAAO,GAAG,CAACd,KAAD,EAAgBe,QAAhB,EAAkCC,UAAlC,KACnB,MAAOJ,QAAP,IAAoB;AAChB,QAAMC,GAAG,GAAG,MAAMjB,QAAQ,CAACqB,QAAT,CAAkBjB,KAAlB,EAAyBe,QAAzB,EAAmCC,UAAnC,CAAlB;AACA,MAAIH,GAAG,CAACH,IAAJ,CAASQ,UAAT,KAAwB,CAA5B,EAA+BN,QAAQ,CAACD,aAAa,EAAd,CAAR;AAElC,CALE;AAMP,OAAO,MAAMQ,QAAQ,GAAG,MACpBP,QAAQ,IAAI;AACRhB,EAAAA,QAAQ,CAACwB,QAAT,GAAoBC,IAApB,CAAyBX,IAAI,IAAI;AAC7B,QAAIA,IAAI,CAACQ,UAAL,KAAoB,CAAxB,EAA2B;AACvBN,MAAAA,QAAQ,CAACH,aAAa,CAAC;AAACV,QAAAA,EAAE,EAAE,IAAL;AAAWC,QAAAA,KAAK,EAAE,IAAlB;AAAwBC,QAAAA,KAAK,EAAE,IAA/B;AAAqCC,QAAAA,MAAM,EAAE;AAA7C,OAAD,CAAd,CAAR;AACH;AACJ,GAJD;AAKH,CAPE,C,CASP","sourcesContent":["import {headerAPI, loginAPI} from \"../../API\";\r\nimport {AppThunk} from \"../store\";\r\n\r\nexport enum enumAuthActionType {\r\n    setAuthData = 'AUTH/PROFILE/SET-NEW-POST-CLICK',\r\n}\r\n\r\nconst initialState: authReducerType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n}\r\n\r\nexport const authReducer = (state: authReducerType = initialState, action: LoginActionType): authReducerType => {\r\n    switch (action.type) {\r\n        case enumAuthActionType.setAuthData:\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//action\r\nexport const setAuthDataAC = (data: authReducerType) => {\r\n    return {\r\n        type: enumAuthActionType.setAuthData,\r\n        payload: {...data}\r\n    }\r\n}\r\n\r\n//thunk\r\nexport const setAuthDataTC = (): AppThunk => async (dispatch) => {\r\n    const res = await headerAPI.setAuthData()\r\n    const {id, email, login} = res.data.data\r\n    if (id) dispatch(setAuthDataAC({id, email, login, isAuth: true}))\r\n}\r\nexport const logInTC = (email: string, password: string, rememberMe: boolean): AppThunk =>\r\n    async (dispatch) => {\r\n        const res = await loginAPI.setLogin(email, password, rememberMe)\r\n        if (res.data.resultCode === 0) dispatch(setAuthDataTC())\r\n\r\n    }\r\nexport const logOutTC = (): AppThunk =>\r\n    dispatch => {\r\n        loginAPI.outLogin().then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setAuthDataAC({id: null, email: null, login: null, isAuth: false}))\r\n            }\r\n        })\r\n    }\r\n\r\n//type\r\nexport type authReducerType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\nexport type LoginActionType = ReturnType<typeof setAuthDataAC>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}