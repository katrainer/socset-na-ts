{"ast":null,"code":"import { usersAPI } from \"../../API\";\nconst initialState = {\n  users: [],\n  pageSize: 20,\n  totalUsersCount: 0,\n  currentPage: 1,\n  preloader: false,\n  followingInProgress: []\n};\nexport const usersPageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SUBSCRIBE\":\n      {\n        return { ...state,\n          users: state.users.map(t => t.id === action.id ? { ...t,\n            followed: true\n          } : { ...t\n          })\n        };\n      }\n\n    case \"UNSUBSCRIBE\":\n      {\n        return { ...state,\n          users: state.users.map(t => t.id === action.id ? { ...t,\n            followed: false\n          } : { ...t\n          })\n        };\n      }\n\n    case \"SET-USERS\":\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case \"SET-TOTAL-USERS-COUNT\":\n      {\n        return { ...state,\n          totalUsersCount: action.totalUsersCount\n        };\n      }\n\n    case \"CHANGE-CURRENT-PAGE\":\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case \"PRELOADER\":\n      {\n        return { ...state,\n          preloader: action.preloader\n        };\n      }\n\n    case \"TOGGLE-FOLLOWING-IN-PROGRESS\":\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(t => t !== action.userId)\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\nexport const subscribe = id => {\n  return {\n    type: 'SUBSCRIBE',\n    id\n  };\n};\nexport const unSubscribe = id => {\n  return {\n    type: 'UNSUBSCRIBE',\n    id\n  };\n};\nexport const setUsers = users => {\n  return {\n    type: 'SET-USERS',\n    users\n  };\n};\nexport const setTotalUsersCount = totalUsersCount => {\n  return {\n    type: 'SET-TOTAL-USERS-COUNT',\n    totalUsersCount\n  };\n};\nexport const changeCurrentPage = currentPage => {\n  return {\n    type: 'CHANGE-CURRENT-PAGE',\n    currentPage\n  };\n};\nexport const changePreloader = preloader => {\n  return {\n    type: \"PRELOADER\",\n    preloader\n  };\n};\nexport const toggleFollowingInProgress = (isFetching, userId) => {\n  return {\n    type: \"TOGGLE-FOLLOWING-IN-PROGRESS\",\n    isFetching,\n    userId\n  };\n};\nexport const thunkSetUsers = (currentPage, pageSize) => async dispatch => {\n  dispatch(changePreloader(true));\n  usersAPI.setUsers(currentPage, pageSize).then(data => {\n    dispatch(changePreloader(false));\n    dispatch(setUsers(data.items));\n  });\n  usersAPI.setTotalUsersCount().then(data => {\n    dispatch(changePreloader(false));\n    dispatch(setTotalUsersCount(data.totalCount));\n  });\n};\nexport const thunkChangeCurrentPage = (currentPage, pageSize) => async dispatch => {\n  dispatch(changePreloader(true));\n  dispatch(changeCurrentPage(currentPage));\n  usersAPI.changeCurrentPage(currentPage, pageSize).then(data => {\n    dispatch(changePreloader(false));\n    dispatch(setUsers(data.items));\n  });\n};\nexport const thunkUnSubscribe = id => async dispatch => {\n  dispatch(toggleFollowingInProgress(true, id));\n  usersAPI.unSubscribeAPI(id).then(data => {\n    if (data.resultCode === 0) {\n      dispatch(unSubscribe(id));\n    }\n\n    dispatch(toggleFollowingInProgress(false, id));\n  });\n};\nexport const thunkSubscribe = id => async dispatch => {\n  dispatch(toggleFollowingInProgress(true, id));\n  usersAPI.subscribe(id).then(data => {\n    if (data.resultCode === 0) {\n      dispatch(subscribe(id));\n    }\n\n    dispatch(toggleFollowingInProgress(false, id));\n  });\n};","map":{"version":3,"sources":["D:/It-inkubator/socset-na-ts/src/redux/reducer/usersPageReducer.ts"],"names":["usersAPI","initialState","users","pageSize","totalUsersCount","currentPage","preloader","followingInProgress","usersPageReducer","state","action","type","map","t","id","followed","isFetching","userId","filter","subscribe","unSubscribe","setUsers","setTotalUsersCount","changeCurrentPage","changePreloader","toggleFollowingInProgress","thunkSetUsers","dispatch","then","data","items","totalCount","thunkChangeCurrentPage","thunkUnSubscribe","unSubscribeAPI","resultCode","thunkSubscribe"],"mappings":"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","sourcesContent":["import {usersAPI} from \"../../API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../storeRedux\";\r\n\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    preloader: boolean\r\n    followingInProgress: Array<null | string>\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: string\r\n    uniqueUrlName: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    status: string | null\r\n    followed: boolean\r\n}\r\nconst initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    preloader: false,\r\n    followingInProgress: [],\r\n}\r\n\r\nexport const usersPageReducer = (state: UsersType = initialState, action: generalType): UsersType => {\r\n    switch (action.type) {\r\n        case \"SUBSCRIBE\": {\r\n            return {\r\n                ...state, users: state.users.map(t => t.id === action.id\r\n                    ? {...t, followed: true} : {...t})\r\n            }\r\n        }\r\n        case \"UNSUBSCRIBE\": {\r\n            return {\r\n                ...state, users: state.users.map(t => t.id === action.id\r\n                    ? {...t, followed: false} : {...t})\r\n            }\r\n        }\r\n        case \"SET-USERS\": {\r\n            return {...state, users: action.users}\r\n        }\r\n        case \"SET-TOTAL-USERS-COUNT\": {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        }\r\n        case \"CHANGE-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"PRELOADER\": {\r\n            return {...state, preloader: action.preloader}\r\n        }\r\n        case \"TOGGLE-FOLLOWING-IN-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(t =>\r\n                        t !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\ntype generalType = subscribeACType\r\n    | unsubscribeACType\r\n    | setSunscribersACType\r\n    | setTotalUsersCountACType\r\n    | changeCurrentPageACType\r\n    | preloaderACType\r\n    | toggleFollowingInProgressACType\r\n\r\ntype subscribeACType = ReturnType<typeof subscribe>\r\nexport const subscribe = (id: string) => {\r\n    return {\r\n        type: 'SUBSCRIBE',\r\n        id,\r\n    } as const\r\n}\r\n\r\ntype unsubscribeACType = ReturnType<typeof unSubscribe>\r\nexport const unSubscribe = (id: string) => {\r\n    return {\r\n        type: 'UNSUBSCRIBE',\r\n        id,\r\n    } as const\r\n}\r\n\r\ntype setSunscribersACType = ReturnType<typeof setUsers>\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: 'SET-USERS',\r\n        users\r\n    } as const\r\n}\r\n\r\ntype setTotalUsersCountACType = ReturnType<typeof setTotalUsersCount>\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {\r\n        type: 'SET-TOTAL-USERS-COUNT',\r\n        totalUsersCount,\r\n    } as const\r\n}\r\n\r\ntype changeCurrentPageACType = ReturnType<typeof changeCurrentPage>\r\nexport const changeCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: 'CHANGE-CURRENT-PAGE',\r\n        currentPage\r\n    } as const\r\n}\r\n\r\nexport type preloaderACType = ReturnType<typeof changePreloader>\r\nexport const changePreloader = (preloader: boolean) => {\r\n    return {\r\n        type: \"PRELOADER\",\r\n        preloader\r\n    } as const\r\n}\r\n\r\nexport type toggleFollowingInProgressACType = ReturnType<typeof toggleFollowingInProgress>\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: string) => {\r\n    return {\r\n        type: \"TOGGLE-FOLLOWING-IN-PROGRESS\",\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\n\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, generalType>\r\nexport const thunkSetUsers =\r\n    (currentPage: number, pageSize: number): ThunkActionType =>\r\n        async dispatch => {\r\n            dispatch(changePreloader(true))\r\n            usersAPI.setUsers(currentPage, pageSize).then(data => {\r\n                dispatch(changePreloader(false))\r\n                dispatch(setUsers(data.items))\r\n            })\r\n            usersAPI.setTotalUsersCount().then(data => {\r\n                dispatch(changePreloader(false))\r\n                dispatch(setTotalUsersCount(data.totalCount))\r\n            })\r\n        }\r\nexport const thunkChangeCurrentPage =\r\n    (currentPage: number, pageSize: number): ThunkActionType =>\r\n        async dispatch => {\r\n            dispatch(changePreloader(true))\r\n            dispatch(changeCurrentPage(currentPage))\r\n            usersAPI.changeCurrentPage(currentPage, pageSize).then(data => {\r\n                dispatch(changePreloader(false))\r\n                dispatch(setUsers(data.items))\r\n            })\r\n        }\r\nexport const thunkUnSubscribe =\r\n    (id: string): ThunkActionType =>\r\n        async dispatch => {\r\n            dispatch(toggleFollowingInProgress(true, id))\r\n            usersAPI.unSubscribeAPI(id).then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(unSubscribe(id))\r\n                }\r\n                dispatch(toggleFollowingInProgress(false, id))\r\n            })\r\n        }\r\nexport const thunkSubscribe =\r\n    (id: string): ThunkActionType =>\r\n        async dispatch => {\r\n            dispatch(toggleFollowingInProgress(true, id))\r\n            usersAPI.subscribe(id).then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(subscribe(id))\r\n                }\r\n                dispatch(toggleFollowingInProgress(false, id))\r\n            })\r\n        }"]},"metadata":{},"sourceType":"module"}