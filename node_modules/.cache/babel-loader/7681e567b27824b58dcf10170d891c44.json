{"ast":null,"code":"import { headerAPI, loginAPI } from \"../../API\";\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SET-AUTH-DATA\":\n      {\n        return { ...state,\n          ...action.data\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\nexport const setAuthData = function (id, email, login) {\n  let isAuth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return {\n    type: 'SET-AUTH-DATA',\n    data: {\n      id,\n      email,\n      login,\n      isAuth\n    }\n  };\n};\nexport const thunkSetAuthData = () => async dispatch => {\n  headerAPI.setAuthData().then(data => {\n    const {\n      id,\n      email,\n      login\n    } = data.data;\n    if (id) dispatch(setAuthData(id, email, login));\n  });\n};\nexport const ThunkLogIn = function (email, password, rememberMe) {\n  let isAuth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return async dispatch => {\n    loginAPI.setLogin(email, password, rememberMe).then(data => {\n      const {\n        id,\n        email,\n        login\n      } = data.data;\n      if (id) dispatch(setAuthData(id, email, login));\n    });\n  };\n};","map":{"version":3,"sources":["D:/It-inkubator/socset-na-ts/src/redux/reducer/authReducer.ts"],"names":["headerAPI","loginAPI","initialState","id","email","login","isAuth","authReducer","state","action","type","data","setAuthData","thunkSetAuthData","dispatch","then","ThunkLogIn","password","rememberMe","setLogin"],"mappings":"AAEA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,WAAlC;AASA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,EAAE,EAAE,IADa;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;AAOA,OAAO,MAAMC,WAAW,GAAG,YAAiF;AAAA,MAAhFC,KAAgF,uEAAvDN,YAAuD;AAAA,MAAzCO,MAAyC;;AACxG,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,eAAL;AAAsB;AAClB,eAAO,EAAC,GAAGF,KAAJ;AAAW,aAAGC,MAAM,CAACE;AAArB,SAAP;AACH;;AACD;AACI,aAAO,EAAC,GAAGH;AAAJ,OAAP;AALR;AAOH,CARM;AAaP,OAAO,MAAMI,WAAW,GAAG,UAACT,EAAD,EAAaC,KAAb,EAA4BC,KAA5B,EAAsE;AAAA,MAA3BC,MAA2B,uEAAT,IAAS;AAC7F,SAAO;AACHI,IAAAA,IAAI,EAAE,eADH;AAEHC,IAAAA,IAAI,EAAE;AAACR,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB;AAFH,GAAP;AAIH,CALM;AAQP,OAAO,MAAMO,gBAAgB,GAAG,MAC5B,MAAMC,QAAN,IAAkB;AACdd,EAAAA,SAAS,CAACY,WAAV,GAAwBG,IAAxB,CAA6BJ,IAAI,IAAI;AACjC,UAAM;AAACR,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYC,MAAAA;AAAZ,QAAqBM,IAAI,CAACA,IAAhC;AACA,QAAIR,EAAJ,EAAQW,QAAQ,CAACF,WAAW,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,CAAZ,CAAR;AACX,GAHD;AAIH,CANE;AAOP,OAAO,MAAMW,UAAU,GACnB,UAACZ,KAAD,EAAgBa,QAAhB,EAAkCC,UAAlC;AAAA,MAAsDZ,MAAtD,uEAAwE,IAAxE;AAAA,SACI,MAAMQ,QAAN,IAAkB;AACdb,IAAAA,QAAQ,CAACkB,QAAT,CAAkBf,KAAlB,EAAyBa,QAAzB,EAAmCC,UAAnC,EAA+CH,IAA/C,CAAoDJ,IAAI,IAAI;AACxD,YAAM;AAACR,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBM,IAAI,CAACA,IAAhC;AACA,UAAIR,EAAJ,EAAQW,QAAQ,CAACF,WAAW,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,CAAZ,CAAR;AACX,KAHD;AAIH,GANL;AAAA,CADG","sourcesContent":["import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../storeRedux\";\r\nimport {headerAPI, loginAPI} from \"../../API\";\r\n\r\ntype authReducerType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n}\r\n\r\nexport const authReducer = (state: authReducerType = initialState, action: generalType): authReducerType => {\r\n    switch (action.type) {\r\n        case \"SET-AUTH-DATA\": {\r\n            return {...state, ...action.data}\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\ntype generalType = setAuthDataACType\r\n\r\nexport type setAuthDataACType = ReturnType<typeof setAuthData>\r\nexport const setAuthData = (id: number, email: string, login: string, isAuth: boolean = true) => {\r\n    return {\r\n        type: 'SET-AUTH-DATA',\r\n        data: {id, email, login, isAuth}\r\n    }\r\n}\r\n\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, generalType>\r\nexport const thunkSetAuthData = (): ThunkActionType =>\r\n    async dispatch => {\r\n        headerAPI.setAuthData().then(data => {\r\n            const {id, email, login} = data.data\r\n            if (id) dispatch(setAuthData(id, email, login))\r\n        })\r\n    }\r\nexport const ThunkLogIn =\r\n    (email: string, password: string, rememberMe:boolean, isAuth: boolean = true): ThunkActionType =>\r\n        async dispatch => {\r\n            loginAPI.setLogin(email, password, rememberMe).then(data => {\r\n                const {id, email, login} = data.data\r\n                if (id) dispatch(setAuthData(id, email, login))\r\n            })\r\n        }"]},"metadata":{},"sourceType":"module"}