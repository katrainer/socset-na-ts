{"ast":null,"code":"import axios from \"axios\";\nconst instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    'API-KEY': '9359a22e-adad-4c18-8f69-1475882f26c8'\n  },\n  withCredentials: true\n});\nexport const usersAPI = {\n  unSubscribeAPI(id) {\n    return instance.delete('follow/' + id);\n  },\n\n  subscribe(id) {\n    return instance.post('follow/' + id);\n  },\n\n  setUsers(currentPage, pageSize) {\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`);\n  }\n\n};\nexport const profileAPI = {\n  getProfileUserData(userId) {\n    return instance.get(`profile/` + userId);\n  },\n\n  getProfileStatus(userId) {\n    return instance.get('profile/status/' + userId);\n  },\n\n  updateProfileStatus(status) {\n    return instance.put('profile/status', {\n      status\n    });\n  }\n\n};\nexport const headerAPI = {\n  setAuthData() {\n    return instance.get('auth/me');\n  }\n\n};\nexport const loginAPI = {\n  setLogin(email, password, rememberMe) {\n    return instance.post('auth/login', {\n      email,\n      password,\n      rememberMe\n    });\n  },\n\n  outLogin() {\n    return instance.delete('auth/login').then(response => response.data);\n  }\n\n}; //type","map":{"version":3,"sources":["D:/It-inkubator/socset-na-ts/src/API.ts"],"names":["axios","instance","create","baseURL","headers","withCredentials","usersAPI","unSubscribeAPI","id","delete","subscribe","post","setUsers","currentPage","pageSize","get","profileAPI","getProfileUserData","userId","getProfileStatus","updateProfileStatus","status","put","headerAPI","setAuthData","loginAPI","setLogin","email","password","rememberMe","outLogin","then","response","data"],"mappings":"AAAA,OAAOA,KAAP,MAAmC,OAAnC;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE,+CADiB;AAE1BC,EAAAA,OAAO,EAAE;AAAC,eAAW;AAAZ,GAFiB;AAG1BC,EAAAA,eAAe,EAAE;AAHS,CAAb,CAAjB;AAMA,OAAO,MAAMC,QAAQ,GAAG;AACpBC,EAAAA,cAAc,CAACC,EAAD,EAAa;AACvB,WAAOP,QAAQ,CAACQ,MAAT,CAA8B,YAAYD,EAA1C,CAAP;AACH,GAHmB;;AAIpBE,EAAAA,SAAS,CAACF,EAAD,EAAa;AAClB,WAAOP,QAAQ,CAACU,IAAT,CAA4B,YAAYH,EAAxC,CAAP;AACH,GANmB;;AAOpBI,EAAAA,QAAQ,CAACC,WAAD,EAAsBC,QAAtB,EAAwC;AAC5C,WAAOb,QAAQ,CAACc,GAAT,CACL,cAAaF,WAAY,UAASC,QAAS,EADtC,CAAP;AAEH;;AAVmB,CAAjB;AAYP,OAAO,MAAME,UAAU,GAAG;AACtBC,EAAAA,kBAAkB,CAACC,MAAD,EAAiB;AAC/B,WAAOjB,QAAQ,CAACc,GAAT,CAAqC,UAAD,GAAaG,MAAjD,CAAP;AACH,GAHqB;;AAItBC,EAAAA,gBAAgB,CAACD,MAAD,EAAiB;AAC7B,WAAOjB,QAAQ,CAACc,GAAT,CAAqB,oBAAoBG,MAAzC,CAAP;AACH,GANqB;;AAOtBE,EAAAA,mBAAmB,CAACC,MAAD,EAAiB;AAChC,WAAOpB,QAAQ,CAACqB,GAAT,CAA2B,gBAA3B,EAA6C;AAACD,MAAAA;AAAD,KAA7C,CAAP;AACH;;AATqB,CAAnB;AAWP,OAAO,MAAME,SAAS,GAAG;AACrBC,EAAAA,WAAW,GAAG;AACV,WAAOvB,QAAQ,CAACc,GAAT,CAIH,SAJG,CAAP;AAKH;;AAPoB,CAAlB;AASP,OAAO,MAAMU,QAAQ,GAAG;AACpBC,EAAAA,QAAQ,CAACC,KAAD,EAAgBC,QAAhB,EAAkCC,UAAlC,EAAuD;AAC3D,WAAO5B,QAAQ,CAACU,IAAT,CACN,YADM,EACQ;AAACgB,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,KADR,CAAP;AAEH,GAJmB;;AAKpBC,EAAAA,QAAQ,GAAG;AACP,WAAO7B,QAAQ,CAACQ,MAAT,CAAgB,YAAhB,EAA8BsB,IAA9B,CAAmCC,QAAQ,IAAIA,QAAQ,CAACC,IAAxD,CAAP;AACH;;AAPmB,CAAjB,C,CAUP","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {'API-KEY': '9359a22e-adad-4c18-8f69-1475882f26c8'},\r\n    withCredentials: true\r\n})\r\n\r\nexport const usersAPI = {\r\n    unSubscribeAPI(id: string) {\r\n        return instance.delete<ResponseType>('follow/' + id)\r\n    },\r\n    subscribe(id: string) {\r\n        return instance.post<ResponseType>('follow/' + id)\r\n    },\r\n    setUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<ResponseGetUsersType>\r\n        (`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n}\r\nexport const profileAPI = {\r\n    getProfileUserData(userId: string) {\r\n        return instance.get<ResponseGetUsersPages>(`profile/` + userId)\r\n    },\r\n    getProfileStatus(userId: string) {\r\n        return instance.get<string>('profile/status/' + userId)\r\n    },\r\n    updateProfileStatus(status: string) {\r\n        return instance.put<ResponseType>('profile/status', {status})\r\n    }\r\n}\r\nexport const headerAPI = {\r\n    setAuthData() {\r\n        return instance.get<ResponseType<{\r\n            id: number,\r\n            email: string,\r\n            login: string,\r\n        }>>('auth/me')\r\n    }\r\n}\r\nexport const loginAPI = {\r\n    setLogin(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<{ email: string, password: string, rememberMe: boolean }, AxiosResponse<ResponseType<{ userId: number }>>>\r\n        ('auth/login', {email, password, rememberMe,})\r\n    },\r\n    outLogin() {\r\n        return instance.delete('auth/login').then(response => response.data)\r\n    }\r\n}\r\n\r\n//type\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type ResponseGetUsersType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: string\r\n    uniqueUrlName: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\nexport type ResponseGetUsersPages = {\r\n    aboutMe: string | null\r\n    contacts: {\r\n        facebook: string | null\r\n        website: string | null\r\n        vk: string | null\r\n        twitter: string | null\r\n        instagram: string | null\r\n        youtube: string | null\r\n        github: string | null\r\n        mainLink: string | null\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string | undefined\r\n        large: string | undefined\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}