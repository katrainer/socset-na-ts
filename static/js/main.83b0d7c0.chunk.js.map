{"version":3,"sources":["common/commonReducer.ts","utils/util-error.ts","api/apiConfig/apiConfig.ts","api/authApi.ts","redux/reducer/authReducer.ts","redux/reducer/profilePageReducer.ts","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","api/profileApi.ts","components/Profile/ProfileInfo/Contacts/Contacts.tsx","components/Profile/ProfileInfo/Settings/Settings.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsConteiner.tsx","components/Profile/Profile.tsx","common/Preloader/Preloader.tsx","hoc/withAuthRedirect.tsx","redux/reducer/appReducer.ts","components/Profile/ProfileConteiner.tsx","components/Login/Login.tsx","redux/reducer/usersPageReducer.ts","components/Header/Header.tsx","api/userApi.ts","redux/reducer/messagesPageReducer.ts","components/Friends/Friends.tsx","common/Paginator/Paginator.tsx","components/Users/Users.tsx","components/Dialogs/Dialogs.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx","components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Users/Users.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPost.module.css","components/Friends/Friends.module.css","App.module.css","common/Paginator/Pagination.module.css","components/Profile/ProfileInfo/Contacts/Contacts.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/Settings/Settings.module.css","components/Profile/MyPosts/Post/Post.module.css","assets/img/preloader.gif","components/Login/Login.module.css","components/Header/Header.module.css"],"names":["enumCommonActionType","errorResponse","e","axios","isAxiosError","response","errorMessage","data","error","console","log","instance","create","baseURL","headers","API-KEY","withCredentials","authAPI","get","email","password","rememberMe","post","delete","enumAuthActionType","initialState","preloader","changePreloaderAC","type","changePreloader","payload","enumProfileActionType","id","login","isAuth","setAuthDataAC","setAuthData","Object","objectSpread2","setAuthDataTC","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","res","_res$data$data","wrap","_context","prev","next","sent","abrupt","t0","stop","_x","apply","this","arguments","Navbar","useSelector","state","useDispatch","react_default","createElement","className","s","navbar","react_router_dom","exact","to","activeClassName","active","ti_index_esm","index_esm","gi_index_esm","onClick","_ref3","_callee3","_context3","resultCode","_x3","style","display","ProfileStatus","React","memo","value","updateStatusTC","_useState","useState","_useState2","slicedToArray","editMode","setEditMode","_useState3","_useState4","status","setStatus","autoFocus","onBlur","onChange","currentTarget","fontSize","wordBreak","onDoubleClick","profileAPI","userId","put","photo","form","FormData","append","Content-Type","postsData","v1","message","likeCount","userProfilePage","setStatusAC","Contacts","profileUserData","profile","mainContainer","aboutMe","contacts","infoContainer","github","vk","instagram","website","facebook","twitter","Settings","formik","useFormik","initialValues","fullName","onSubmit","values","handleSubmit","assign","placeholder","getFieldProps","ProfileInfo","_profileUserData$phot","hide","setHide","ownerPage","_state$profile$userPr","owner","profileImgContainer","src","photos","small","large","alt","nameContainer","Fragment","name","target","files","_ref4","_callee4","_context4","updatePhotos","_x6","fileInput","htmlFor","button","Contacts_Contacts","Settings_Settings","Post","MyPosts","setNewPostClickAC","posts","map","p","key","messages","resetForm","newPostContainer","formContainer","handleChange","MyPostsContainer","connect","setNewPostClick","Profile","Preloader","preloaderImg","width","mstp","EnumAppActionType","ProfileContainer","props","setProfileUserDataTC","getStatusTC","Preloader_Preloader","PureComponent","compose","userPage","param","getState","match","params","setProfileUserData","_x2","_ref2","_callee2","_context2","_x4","_x5","withRouter","Component","restProps","objectWithoutProperties","_excluded","react_router","Login","ThunkLogIn","validate","errors","test","length","allContainer","href","touched","color","checked","enumUsersPageActionType","initialized","Header","header","usersAPI","page","count","par","term","undefined","friend","enumMessagesActionType","users","pageSize","totalUsersCount","currentPage","followingInProgress","subscribeAC","subscribe","unSubscribeAC","unSubscribe","setUsersAC","setUsers","setTotalUsersCountAC","setTotalUsersCount","toggleFollowingInProgressAC","isFetching","toggleFollowingInProgress","setFriendsTC","items","totalCount","unSubscribeTC","subscribeTC","Friends","useEffect","t","friendContainer","imgContainer","textContainer","followed","Paginator","pageCount","callback","curPage","setCurPage","totalPages","Math","ceil","pages","pagesCount","i","push","createPages","setTest","index","Users","changeCurrentPageHandler","useCallback","changeCurrentPage","setUsersTC","container","containerUsers","containerUser","imgAndName","statusAndName","disabled","some","Dialogs","usersForDialogs","slice","messagesData","time","_t$photos","contentContainer","App","initializeTC","Header_Header","Navbar_Navbar","path","render","Dialogs_Dialogs","ProfileConteiner","Users_Users","Login_Login","Friends_Friends","AppReducer","initializedSuccess","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","concat","toConsumableArray","filter","common","store","createStore","applyMiddleware","thunk","window","ReactDOM","es","src_App","document","getElementById","module","exports","timeContainer"],"mappings":"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","file":"static/js/main.83b0d7c0.chunk.js","sourcesContent":["export enum enumCommonActionType {\r\n    changePreloader = 'COMMON/PRELOADER'\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    preloader: false\r\n}\r\n\r\nexport const commonReducer = (state: initialStateType = initialState, action: CommonActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case enumCommonActionType.changePreloader:\r\n            return {...state, ...action.payload}\r\n        default :\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//action\r\nexport const changePreloaderAC = (preloader: boolean) => {\r\n    return {\r\n        type: enumCommonActionType.changePreloader,\r\n        payload: {preloader}\r\n    } as const\r\n}\r\n\r\n//thunk\r\n\r\n\r\n//type\r\nexport type initialStateType = { preloader: boolean }\r\nexport type preloaderACType = ReturnType<typeof changePreloaderAC>\r\nexport type CommonActionType = preloaderACType","import axios from 'axios';\r\n\r\nexport const errorResponse = (e: any) => {\r\n    if (axios.isAxiosError(e) && e.response) {\r\n        const errorMessage = e.response.data.error;\r\n        console.log(errorMessage)\r\n    }\r\n}","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {'API-KEY': '9359a22e-adad-4c18-8f69-1475882f26c8'},\r\n    withCredentials: true\r\n})","import {instance} from './apiConfig/apiConfig';\r\nimport {AxiosResponse} from 'axios';\r\n\r\n\r\nexport const authAPI = {\r\n    setAuthData() {\r\n        return instance.get<ResponseType<{\r\n            id: number,\r\n            email: string,\r\n            login: string,\r\n        }>>('auth/me')\r\n    },\r\n    setLogin(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<{ email: string, password: string, rememberMe: boolean }, AxiosResponse<ResponseType<{ userId: number }>>>\r\n        ('auth/login', {email, password, rememberMe,})\r\n    },\r\n    outLogin() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}","import {AppThunk} from '../store';\r\nimport {errorResponse} from '../../utils/util-error';\r\nimport {authAPI} from '../../api/authApi';\r\nimport {changePreloaderAC} from '../../common/commonReducer';\r\n\r\nexport enum enumAuthActionType {\r\n    setAuthData = 'AUTH/PROFILE/SET-NEW-POST-CLICK',\r\n}\r\n\r\nconst initialState = {\r\n    id: 0,\r\n    email: '',\r\n    login: '',\r\n    isAuth: false,\r\n}\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: LoginActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case enumAuthActionType.setAuthData:\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//action\r\nexport const setAuthDataAC = (data: initialStateType) => {\r\n    return {\r\n        type: enumAuthActionType.setAuthData,\r\n        payload: {...data}\r\n    }\r\n}\r\n\r\n//thunk\r\nexport const setAuthDataTC = (): AppThunk => async dispatch => {\r\n    dispatch(changePreloaderAC(true))\r\n    try {\r\n        const res = await authAPI.setAuthData()\r\n        const {id, email, login} = res.data.data\r\n        if (id) dispatch(setAuthDataAC({id, email, login, isAuth: true}))\r\n        return 'aaa'\r\n    } catch (e) {\r\n        errorResponse(e)\r\n    }\r\n    dispatch(changePreloaderAC(false))\r\n}\r\nexport const logInTC = (email: string, password: string, rememberMe: boolean): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(changePreloaderAC(true))\r\n        try {\r\n            const res = await authAPI.setLogin(email, password, rememberMe)\r\n            if (res.data.resultCode === 0) dispatch(setAuthDataTC())\r\n        } catch (e) {\r\n            errorResponse(e)\r\n        }\r\n        dispatch(changePreloaderAC(false))\r\n    }\r\nexport const logOutTC = (): AppThunk => async dispatch => {\r\n    dispatch(changePreloaderAC(true))\r\n    try {\r\n        const res = await authAPI.outLogin()\r\n        if (res.data.resultCode === 0) dispatch(setAuthDataAC({id: 0, email: '', login: '', isAuth: false}))\r\n    } catch (e) {\r\n        errorResponse(e)\r\n    }\r\n    dispatch(changePreloaderAC(false))\r\n}\r\n\r\n//type\r\ntype initialStateType = typeof initialState\r\nexport type LoginActionType = ReturnType<typeof setAuthDataAC>\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {AppThunk} from '../store';\r\nimport {profileAPI, ProfileDataType, updateProfileInfoType} from '../../api/profileApi';\r\nimport {changePreloaderAC, enumCommonActionType, preloaderACType} from '../../common/commonReducer';\r\nimport {errorResponse} from '../../utils/util-error';\r\n\r\nexport enum enumProfileActionType {\r\n    setNewPostClick = 'PROFILE/SET-NEW-POST-CLICK',\r\n    setProfileUserData = 'PROFILE/SET-PROFILE-USER-DATA',\r\n    setStatus = 'PROFILE/SET-STATUS',\r\n    updatePhotos = 'PROFILE/UPDATE-PHOTOS',\r\n    updateProfileInfo = 'PROFILE/UPDATE-PROFILE-INFO',\r\n}\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {id: v1(), message: 'Memento mori', likeCount: 12},\r\n        {id: v1(), message: 'How are you guys?', likeCount: 212},\r\n        {id: v1(), message: 'Hello world!', likeCount: 1212},\r\n    ],\r\n    userProfilePage: {} as ProfileDataType,\r\n    preloader: false,\r\n    status: '',\r\n}\r\nexport const profilePageReducer = (state: initialStateType = initialState, action: ProfileActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case enumProfileActionType.setNewPostClick:\r\n            return {\r\n                ...state,\r\n                postsData: [action.payload, ...state.postsData]\r\n            }\r\n        case enumProfileActionType.setProfileUserData:\r\n        case enumCommonActionType.changePreloader:\r\n        case enumProfileActionType.setStatus:\r\n            return {...state, ...action.payload}\r\n        case enumProfileActionType.updatePhotos:\r\n            return {...state, userProfilePage: {...state.userProfilePage, ...action.payload.photos}}\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const setNewPostClickAC = (message: string) => {\r\n    return {\r\n        type: enumProfileActionType.setNewPostClick,\r\n        payload: {message, likeCount: 0, id: v1()},\r\n    } as const\r\n}\r\nexport const setProfileUserDataAC = (userProfilePage: ProfileDataType) => {\r\n    return {\r\n        type: enumProfileActionType.setProfileUserData,\r\n        payload: {userProfilePage}\r\n    } as const\r\n}\r\nexport const setStatusAC = (status: string) => {\r\n    return {\r\n        type: enumProfileActionType.setStatus,\r\n        payload: {status},\r\n    } as const\r\n}\r\nconst updatePhotosAC = (photos: { small: string, large: string }) => {\r\n    return {\r\n        type: enumProfileActionType.updatePhotos,\r\n        payload: {photos}\r\n    } as const\r\n}\r\n\r\n\r\n//thunk\r\nexport const setProfileUserDataTC = (param: any): AppThunk =>\r\n    async (dispatch, getState) => {\r\n        dispatch(changePreloaderAC(true))\r\n        let userId = param.match.params.userId\r\n        if (!userId) {\r\n            const id = getState().login.id\r\n            userId = id\r\n        }\r\n        try {\r\n            const res = await profileAPI.getProfileUserData(userId)\r\n            dispatch(setProfileUserDataAC(res.data))\r\n        } catch (e) {\r\n            errorResponse(e)\r\n        }\r\n        dispatch(changePreloaderAC(false))\r\n    }\r\nexport const getStatusTC = (param: any): AppThunk =>\r\n    async (dispatch, getState) => {\r\n        dispatch(changePreloaderAC(true))\r\n        let userId = param.match.params.userId\r\n        if (!userId) {\r\n            const id = getState().login.id\r\n            userId = id\r\n        }\r\n        try {\r\n            const res = await profileAPI.getProfileStatus(userId)\r\n            dispatch(setStatusAC(res.data))\r\n        } catch (e) {\r\n            errorResponse(e)\r\n        }\r\n        dispatch(changePreloaderAC(false))\r\n    }\r\nexport const updateStatusTC = (status: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(changePreloaderAC(true))\r\n        const res = await profileAPI.updateProfileStatus(status)\r\n        if (res.data.resultCode === 0) dispatch(setStatusAC(status))\r\n        dispatch(changePreloaderAC(false))\r\n    }\r\nexport const updatePhotosTC = (photo: File): AppThunk => async dispatch => {\r\n    dispatch(changePreloaderAC(true))\r\n    try {\r\n        const res = await profileAPI.updateProfilePhoto(photo)\r\n        dispatch(updatePhotosAC(res.data.data))\r\n    } catch (e) {\r\n        errorResponse(e)\r\n    }\r\n    dispatch(changePreloaderAC(false))\r\n}\r\n\r\n//type\r\ntype initialStateType = typeof initialState\r\nexport type ProfileActionType = ReturnType<typeof setNewPostClickAC>\r\n    | ReturnType<typeof setProfileUserDataAC>\r\n    | preloaderACType\r\n    | ReturnType<typeof setStatusAC>\r\n    | ReturnType<typeof updatePhotosAC>\r\n","import React from 'react';\r\nimport {Link, NavLink} from 'react-router-dom';\r\nimport s from './Navbar.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {SiActigraph, SiMessenger} from 'react-icons/si'\r\nimport {TiBusinessCard} from 'react-icons/ti';\r\nimport {GiThreeFriends} from 'react-icons/gi';\r\nimport {logOutTC} from '../../redux/reducer/authReducer';\r\n\r\nexport const Navbar = () => {\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth)\r\n    const dispatch = useDispatch()\r\n    const logOutHandler = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n    return (\r\n        <nav className={s.navbar}>\r\n            <NavLink exact to=\"/\" activeClassName={s.active}><TiBusinessCard/>My profile</NavLink>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.active}><SiMessenger/>Message</NavLink>\r\n            <NavLink to=\"/friends\" activeClassName={s.active}><GiThreeFriends/>Friends</NavLink>\r\n            <NavLink to=\"/users\" activeClassName={s.active}><SiActigraph/>Users</NavLink>\r\n            {isAuth &&\r\n                <button onClick={logOutHandler}>Log Out<Link style={{display: 'none'}} to={''}/></button>}\r\n        </nav>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    value: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus: React.FC<ProfileStatusType> = React.memo((\r\n    {\r\n        value,\r\n        updateStatusTC,\r\n    }) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(value)\r\n    const onBlurHandler = () => {\r\n        updateStatusTC(status)\r\n        setEditMode(false)\r\n    }\r\n    const onDoubleClickHandler = () => setEditMode(true)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n    return <div>\r\n        {editMode\r\n            ? <div>\r\n                <input value={status} autoFocus onBlur={onBlurHandler} onChange={onChangeHandler}/>\r\n            </div>\r\n            : <span style={{fontSize:16, wordBreak: 'break-word'}} onDoubleClick={onDoubleClickHandler}>{value || 'NO STATUS'}</span>}\r\n    </div>\r\n})","import {instance} from './apiConfig/apiConfig';\r\n\r\nexport const profileAPI = {\r\n    getProfileUserData(userId: string) {\r\n        return instance.get<ProfileDataType>(`profile/` + userId)\r\n    },\r\n    getProfileStatus(userId: string) {\r\n        return instance.get<string>('profile/status/' + userId)\r\n    },\r\n    updateProfileStatus(status: string) {\r\n        return instance.put<ResponseType>('profile/status', {status})\r\n    },\r\n    updateProfilePhoto(photo: File) {\r\n        let form = new FormData()\r\n        form.append('image', photo)\r\n        return instance.put<ResponseType<{ small: string, large: string }>>('profile/photo', form, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    updateProfileInfo(data: updateProfileInfoType) {\r\n        return instance.get('profile')\r\n    },\r\n}\r\n\r\n\r\n//type\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type ProfileDataType = {\r\n    aboutMe: string | null\r\n    contacts: {\r\n        facebook: string | null\r\n        website: string | null\r\n        vk: string | null\r\n        twitter: string | null\r\n        instagram: string | null\r\n        youtube: string | null\r\n        github: string | null\r\n        mainLink: string | null\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type updateProfileInfoType = {\r\n    contacts: {\r\n        facebook: string | null\r\n        website: string | null\r\n        vk: string | null\r\n        twitter: string | null\r\n        instagram: string | null\r\n        youtube: string | null\r\n        github: string | null\r\n        mainLink: string | null\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string\r\n    userId: number\r\n}","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../redux/store';\r\nimport {ProfileDataType} from '../../../../api/profileApi';\r\nimport s from './Contacts.module.css'\r\n\r\nexport const Contacts = () => {\r\n    const profileUserData = useSelector<AppRootStateType, ProfileDataType>(state => state.profile.userProfilePage)\r\n    return <div className={s.mainContainer}>\r\n       <div>About me:{' '}{profileUserData.aboutMe?profileUserData.aboutMe: 'no info'}</div>\r\n        {profileUserData.contacts &&\r\n            <div className={s.infoContainer}>\r\n                <div>\r\n                    <p>GitHub:{' '}{profileUserData.contacts.github ? profileUserData.contacts.github : 'soon'}</p>\r\n                    <p>VK:{' '}{profileUserData.contacts.vk ? profileUserData.contacts.vk : 'soon'}</p>\r\n                    <p>Instagram:{' '}{profileUserData.contacts.instagram ? profileUserData.contacts.instagram : 'soon'}</p>\r\n                </div>\r\n                <div>\r\n                    <p>Website:{' '}{profileUserData.contacts.website ? profileUserData.contacts.website : 'soon'}</p>\r\n                    <p>Facebook:{' '}{profileUserData.contacts.facebook ? profileUserData.contacts.facebook : 'soon'}</p>\r\n                    <p>Twitter:{' '}{profileUserData.contacts.twitter ? profileUserData.contacts.twitter : 'soon'}</p>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n}","import React from 'react';\r\nimport s from './Settings.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../redux/store';\r\nimport {ProfileDataType} from '../../../../api/profileApi';\r\nimport {useFormik} from 'formik';\r\n\r\nexport const Settings = () => {\r\n    const profile = useSelector<AppRootStateType, ProfileDataType>(state => state.profile.userProfilePage)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: profile.fullName,\r\n            contacts: {\r\n                vk: profile.contacts.vk,\r\n                twitter: profile.contacts.twitter,\r\n                facebook: profile.contacts.facebook,\r\n                website: profile.contacts.website,\r\n                instagram: profile.contacts.instagram,\r\n                github: profile.contacts.github,\r\n            }\r\n        },\r\n        onSubmit: (values) => {\r\n            console.log(values)\r\n        },\r\n    })\r\n    return (\r\n        <form className={s.mainContainer} onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <div>Мой id:{profile.userId}</div>\r\n                    <div>Сменить имя на:\r\n                        <input id=\"fullName\"\r\n                               type=\"text\"\r\n                               placeholder=\"fullName\"\r\n                               {...formik.getFieldProps('fullName')}/>\r\n                    </div>\r\n                    {/*<div>Сменить адрес VK на:*/}\r\n                    {/*    <input id={formik.initialValues.contacts.vk}*/}\r\n                    {/*           type=\"text\"*/}\r\n                    {/*           placeholder=\"\"*/}\r\n                    {/*           {...formik.getFieldProps(formik.initialValues.contacts.vk)}/>*/}\r\n                    {/*</div>*/}\r\n                    {/*<div>Сменить адрес VK на:*/}\r\n                    {/*    <input id=\"contacts.vk\"*/}\r\n                    {/*           type=\"text\"*/}\r\n                    {/*           placeholder=\"\"*/}\r\n                    {/*           {...formik.getFieldProps('contacts.vk')}/>*/}\r\n                    {/*</div>*/}\r\n                    <div>Сменить адрес twitter на:\r\n                        <input id=\"contacts.twitter\"\r\n                               type=\"text\"\r\n                               placeholder=\"\"\r\n                               {...formik.getFieldProps('contacts.twitter')}/>\r\n                    </div>\r\n                    <div>Сменить адрес facebook на:\r\n                        <input id=\"contacts.facebook\"\r\n                               type=\"text\"\r\n                               placeholder=\"\"\r\n                               {...formik.getFieldProps('contacts.facebook')}/>\r\n                    </div>\r\n                    <div>Сменить адрес своего сайта на:\r\n                        <input id=\"contacts.website\"\r\n                               type=\"text\"\r\n                               placeholder=\"\"\r\n                               {...formik.getFieldProps('contacts.website')}/>\r\n                    </div>\r\n                    <div>Сменить адрес instagram на:\r\n                        <input id=\"contacts.instagram\"\r\n                               type=\"text\"\r\n                               placeholder=\"\"\r\n                               {...formik.getFieldProps('contacts.instagram')}/>\r\n                    </div>\r\n                    <div>Сменить адрес github на:\r\n                        <input id=\"contacts.github\"\r\n                               type=\"text\"\r\n                               placeholder=\"\"\r\n                               {...formik.getFieldProps('contacts.github')}/>\r\n                    </div>\r\n                </div>\r\n                <button type={'submit'}>Сохранить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {ProfileStatus} from './ProfileStatus/ProfileStatus';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../redux/store';\r\nimport {ProfileDataType} from '../../../api/profileApi';\r\nimport {updatePhotosTC} from '../../../redux/reducer/profilePageReducer';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Contacts} from './Contacts/Contacts';\r\nimport {Settings} from './Settings/Settings';\r\n\r\n\r\ntype PropsType = {\r\n    profileUserData: ProfileDataType\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\nexport const ProfileInfo: React.FC<PropsType> = React.memo((\r\n    {\r\n        profileUserData,\r\n        status,\r\n        updateStatusTC,\r\n    }) => {\r\n\r\n    const [hide, setHide] = useState(true)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const ownerPage = useSelector<AppRootStateType, number | undefined>(state => state.profile.userProfilePage?.userId)\r\n    const owner = useSelector<AppRootStateType, number>(state => state.login.id)\r\n    const savePhotoHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            dispatch(updatePhotosTC(e.target.files[0]))\r\n        }\r\n        return\r\n    }\r\n    return (\r\n        <div className={s.mainContainer}>\r\n            <div className={s.profileImgContainer}>\r\n                <img\r\n                    src={profileUserData.photos?.small ? profileUserData.photos.large : 'https://i.pinimg.com/736x/75/24/87/752487a0b94808fe215c2dbf3f3f18b7.jpg'}\r\n                    alt=\"изображение того, чего нету\"/>\r\n                <div className={s.nameContainer}>\r\n                    <p>{profileUserData.fullName}</p>\r\n                    <ProfileStatus\r\n                        value={status}\r\n                        updateStatusTC={updateStatusTC}/>\r\n                    {ownerPage === owner && <>\r\n                        <input\r\n                            name=\"file\"\r\n                            id=\"file-type\"\r\n                            type=\"file\"\r\n                            onChange={savePhotoHandler}\r\n                            style={{display: 'none'}}/>\r\n                        <label className={s.fileInput} htmlFor=\"file-type\">Изменить аватарку</label>\r\n                        <button\r\n                            className={s.button}\r\n                            onClick={() => setHide(!hide)}>\r\n                            Изменить данные\r\n                        </button>\r\n                    </>}\r\n                </div>\r\n            </div>\r\n            <Contacts/>\r\n            {hide && ownerPage === owner && <Settings/>}\r\n        </div>\r\n    )\r\n})","import s from './Post.module.css';\r\nimport React from 'react';\r\n\r\ntype propsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport const Post: React.FC<propsType> = React.memo(({message, likeCount}) => {\r\n    return (\r\n        <div className={s.mainContainer}>\r\n            <img src=\"https://cs13.pikabu.ru/avatars/3395/x3395805-1845289045.png\" alt=\"pikabu\"/>\r\n            <div>\r\n                <div>{message}</div>\r\n                <div>\r\n                    <span>like: {likeCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport s from './MyPost.module.css'\r\nimport {MyPostsType} from './MyPostsConteiner';\r\nimport {Post} from './Post/Post';\r\nimport {useFormik} from 'formik';\r\n\r\ntype valuesType = {\r\n    messages: string,\r\n}\r\nexport const MyPosts: React.FC<MyPostsType> =\r\n    React.memo(({\r\n                    postsData,\r\n                    setNewPostClickAC\r\n                }) => {\r\n        const posts = postsData.map(p => <Post key={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                messages: '',\r\n            },\r\n            onSubmit: (values: valuesType) => {\r\n                setNewPostClickAC(values.messages)\r\n                formik.resetForm()\r\n            },\r\n        })\r\n        return (\r\n            <div className={s.mainContainer}>\r\n                <div className={s.newPostContainer}>\r\n                    <span>My posts</span>\r\n                    <form onSubmit={formik.handleSubmit} className={s.formContainer}>\r\n                    <textarea\r\n                        name=\"messages\"\r\n                        id=\"messages\"\r\n                        placeholder=\"write\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.messages}\r\n                    />\r\n                        <button type={'submit'}>Add new post</button>\r\n                    </form>\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {posts}\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n","import {AppRootStateType} from '../../../redux/store';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {setNewPostClickAC} from '../../../redux/reducer/profilePageReducer';\r\n\r\ntype MapStateToPropsType = {\r\n    postsData: PostDataType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setNewPostClickAC: (e: string) => void\r\n}\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        postsData: state.profile.postsData,\r\n    }\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps,\r\n    {setNewPostClickAC}\r\n)(MyPosts)\r\n\r\nexport type PostDataType = {\r\n    id: string\r\n    message: string\r\n    likeCount: number\r\n}","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsConteiner';\r\nimport {ProfileDataType} from '../../api/profileApi';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/store';\r\n\r\n\r\ntype PropsType = {\r\n    profileUserData: ProfileDataType\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\nexport const Profile: React.FC<PropsType> = React.memo((\r\n    {\r\n        profileUserData,\r\n        status,\r\n        updateStatusTC,\r\n    }) => {\r\n    const ownerPage = useSelector<AppRootStateType, number | undefined>(state => state.profile.userProfilePage?.userId)\r\n    const owner = useSelector<AppRootStateType, number>(state => state.login.id)\r\n    return (\r\n        <div className={s.mainContainer}>\r\n            <ProfileInfo\r\n                profileUserData={profileUserData}\r\n                status={status}\r\n                updateStatusTC={updateStatusTC}/>\r\n            {ownerPage === owner && <MyPostsContainer/>}\r\n        </div>\r\n    )\r\n})","import preloaderImg from '../../assets/img/preloader.gif';\r\nimport React from 'react';\r\n\r\nexport const Preloader = () => {\r\n    return <img src={preloaderImg}\r\n                style={{width: 100}}\r\n                alt=\"изображение не загрузилось(((\"/>\r\n}","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\n\r\ntype mstpType = {\r\n    isAuth: boolean\r\n}\r\nconst mstp = (state: AppRootStateType): mstpType => {\r\n    return {\r\n        isAuth: state.login.isAuth,\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: mstpType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    const connectRedirectComponent = connect(mstp)(RedirectComponent)\r\n    return connectRedirectComponent\r\n}","import {AppThunk} from '../store';\r\nimport {setAuthDataTC} from './authReducer';\r\nimport {errorResponse} from '../../utils/util-error';\r\n\r\nexport enum EnumAppActionType {\r\n    initializedSuccess = 'APP/INITIALIZED-SUCCESS'\r\n}\r\n\r\nconst initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const AppReducer = (state: InitialStateType = initialState, action: AppReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case EnumAppActionType.initializedSuccess:\r\n            return {...state, initialized: true}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//action\r\nexport const initializedSuccess = () => {\r\n    return {type: EnumAppActionType.initializedSuccess}\r\n}\r\n\r\n// thunk\r\nexport const initializeTC = (): AppThunk => async dispatch => {\r\n    try {\r\n        await dispatch(setAuthDataTC())\r\n        dispatch(initializedSuccess())\r\n    } catch (e) {\r\n        errorResponse(e)\r\n    }\r\n}\r\n\r\n//type\r\ntype InitialStateType = typeof initialState\r\nexport type AppReducerActionType = ReturnType<typeof initializedSuccess>","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Profile} from './Profile';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {\r\n    getStatusTC,\r\n    setProfileUserDataTC,\r\n    updateStatusTC,\r\n} from '../../redux/reducer/profilePageReducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {ProfileDataType} from '../../api/profileApi';\r\n\r\nclass ProfileContainer extends React.PureComponent<PropsType> {\r\n    componentDidMount() {\r\n        this.props.setProfileUserDataTC(this.props)\r\n        this.props.getStatusTC(this.props)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.preloader && <Preloader/>}\r\n            <Profile\r\n                profileUserData={this.props.userProfilePage}\r\n                status={this.props.status}\r\n                updateStatusTC={this.props.updateStatusTC}/>\r\n        </>\r\n    }\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string,\r\n}\r\ntype MapStateToPropsType = {\r\n    preloader: boolean\r\n    userProfilePage: ProfileDataType\r\n    status: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setProfileUserDataTC: (param: any) => void\r\n    getStatusTC: (param: any) => void\r\n    updateStatusTC: (status: string) => void\r\n}\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        preloader: state.userPage.preloader,\r\n        userProfilePage: state.profile.userProfilePage,\r\n        status: state.profile.status\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            setProfileUserDataTC, getStatusTC,\r\n            updateStatusTC,\r\n        }),\r\n    withRouter,\r\n    WithAuthRedirect,\r\n)(ProfileContainer)","import React from 'react';\r\nimport {logInTC} from '../../redux/reducer/authReducer';\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {useFormik} from 'formik';\r\nimport s from './Login.module.css'\r\n\r\n\r\ntype LoginType = {\r\n    ThunkLogIn: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\ntype valuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\nconst Login: React.FC<LoginType> = React.memo(({ThunkLogIn, isAuth}) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length < 3) errors.password = 'The password is too short'\r\n            return errors;\r\n        },\r\n        onSubmit: (values: valuesType) => {\r\n            dispatch(ThunkLogIn(values.email, values.password, values.rememberMe))\r\n        },\r\n    })\r\n    if (isAuth) return <Redirect to=\"/profile\"/>\r\n    return <div className={s.allContainer}>\r\n        <span>Log In</span>\r\n        <div>\r\n            <p>To log in get registered\r\n                <a href={'https://social-network.samuraijs.com/'}\r\n                   target={'_blank'}> here\r\n                </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n        </div>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <input id={'email'}\r\n                   type={'email'}\r\n                   placeholder={'email'}\r\n                   {...formik.getFieldProps('email')}/>\r\n            {formik.touched.email && formik.errors.email &&\r\n                <div style={{color: 'red'}}>{formik.errors.email}</div>}<br/>\r\n            <input id={'password'}\r\n                   type={'password'}\r\n                   placeholder={'password'}\r\n                   {...formik.getFieldProps('password')}/>\r\n            {formik.touched.password && formik.errors.password &&\r\n                <div style={{color: 'red'}}>{formik.errors.password}</div>}<br/>\r\n            <input id={'check'}\r\n                   type={'checkbox'}\r\n                   checked={formik.values.rememberMe}\r\n                   {...formik.getFieldProps('rememberMe')}\r\n            /> Remember Me<br/>\r\n            <button type={'submit'}>Log In</button>\r\n        </form>\r\n    </div>\r\n})\r\n\r\n\r\n//----------------------------------------connect\r\nconst pstp = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.login.isAuth\r\n    }\r\n}\r\nexport default connect(pstp, {ThunkLogIn: logInTC})(Login)\r\n\r\n//type\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n","import {AppThunk} from '../store';\r\nimport {changePreloaderAC, enumCommonActionType, preloaderACType} from '../../common/commonReducer';\r\nimport {usersAPI, UserType} from '../../api/userApi';\r\nimport {errorResponse} from '../../utils/util-error';\r\n\r\nexport enum enumUsersPageActionType {\r\n    subscribe = 'USERSPAGE/SUBSCRIBE',\r\n    unSubscribe = 'USERSPAGE/UNSUBSCRIBE',\r\n    setUsers = 'USERSPAGE/SET-USERS',\r\n    setTotalUsersCount = 'USERSPAGE/SET-TOTAL-USERS-COUNT',\r\n    changeCurrentPage = 'USERSPAGE/CHANGE-CURRENT-PAGE',\r\n    toggleFollowingInProgress = 'USERSPAGE/TOGGLE-FOLLOWING-IN-PROGRESS',\r\n}\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    preloader: false,\r\n    followingInProgress: [] as Array<null | string>,\r\n}\r\n\r\nexport const usersPageReducer = (state: initialStateType = initialState, action: UserPageActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case enumUsersPageActionType.subscribe:\r\n            return {\r\n                ...state, users: state.users.map(t => t.id === action.payload.id\r\n                    ? {...t, followed: true} : {...t})\r\n            }\r\n        case enumUsersPageActionType.unSubscribe:\r\n            return {\r\n                ...state, users: state.users.map(t => t.id === action.payload.id\r\n                    ? {...t, followed: false} : {...t})\r\n            }\r\n        case enumUsersPageActionType.setUsers:\r\n        case enumUsersPageActionType.setTotalUsersCount:\r\n        case enumUsersPageActionType.changeCurrentPage:\r\n        case enumCommonActionType.changePreloader:\r\n            return {...state, ...action.payload}\r\n        case enumUsersPageActionType.toggleFollowingInProgress:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.payload.isFetching ?\r\n                    [...state.followingInProgress, action.payload.userId]\r\n                    : state.followingInProgress.filter(t =>\r\n                        t !== action.payload.userId)\r\n            }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//action\r\nexport const subscribeAC = (id: string) => {\r\n    return {\r\n        type: enumUsersPageActionType.subscribe, payload: {id},\r\n    } as const\r\n}\r\nexport const unSubscribeAC = (id: string) => {\r\n    return {\r\n        type: enumUsersPageActionType.unSubscribe, payload: {id},\r\n    } as const\r\n}\r\nexport const setUsersAC = (users: Array<UserType>) => {\r\n    return {\r\n        type: enumUsersPageActionType.setUsers, payload: {users}\r\n    } as const\r\n}\r\nexport const setTotalUsersCountAC = (totalUsersCount: number) => {\r\n    return {\r\n        type: enumUsersPageActionType.setTotalUsersCount, payload: {totalUsersCount},\r\n    } as const\r\n}\r\nexport const changeCurrentPageAC = (currentPage: number) => {\r\n    return {\r\n        type: enumUsersPageActionType.changeCurrentPage, payload: {currentPage}\r\n    } as const\r\n}\r\nexport const toggleFollowingInProgressAC = (isFetching: boolean, userId: string) => {\r\n    return {\r\n        type: enumUsersPageActionType.toggleFollowingInProgress, payload: {\r\n            isFetching,\r\n            userId\r\n        }\r\n    } as const\r\n}\r\n\r\n\r\n//thunk\r\nexport const setUsersTC = (count: number = 10, friend: boolean = false, term: string = ''): AppThunk =>\r\n    async (dispatch, getState) => {\r\n        dispatch(changePreloaderAC(true))\r\n        const page = getState().userPage.currentPage\r\n        dispatch(changePreloaderAC(true))\r\n        try {\r\n            const res = await usersAPI.setUsers(page, count, term)\r\n            dispatch(setUsersAC(res.data.items))\r\n            dispatch(setTotalUsersCountAC(res.data.totalCount))\r\n        } catch (e) {\r\n            errorResponse(e)\r\n        }\r\n        dispatch(changePreloaderAC(false))\r\n    }\r\nexport const setFriendsTC = (): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(changePreloaderAC(true))\r\n        try {\r\n            const res = await usersAPI.setFriends()\r\n            dispatch(setUsersAC(res.data.items))\r\n            dispatch(setTotalUsersCountAC(res.data.totalCount))\r\n        } catch (e) {\r\n            errorResponse(e)\r\n        }\r\n        dispatch(changePreloaderAC(false))\r\n    }\r\nexport const unSubscribeTC = (id: string): AppThunk => async dispatch => {\r\n    dispatch(changePreloaderAC(true))\r\n    dispatch(toggleFollowingInProgressAC(true, id))\r\n    try {\r\n        const res = await usersAPI.unSubscribeAPI(id)\r\n        if (res.data.resultCode === 0) dispatch(unSubscribeAC(id))\r\n    } catch (e) {\r\n        errorResponse(e)\r\n    }\r\n    dispatch(toggleFollowingInProgressAC(false, id))\r\n    dispatch(changePreloaderAC(false))\r\n}\r\nexport const subscribeTC = (id: string): AppThunk => async dispatch => {\r\n    dispatch(changePreloaderAC(true))\r\n    dispatch(toggleFollowingInProgressAC(true, id))\r\n    try {\r\n        const res = await usersAPI.subscribe(id)\r\n        if (res.data.resultCode === 0) dispatch(subscribeAC(id))\r\n    } catch (e) {\r\n        errorResponse(e)\r\n    }\r\n    dispatch(toggleFollowingInProgressAC(false, id))\r\n    dispatch(changePreloaderAC(false))\r\n}\r\n\r\n//type\r\ntype initialStateType = typeof initialState\r\nexport type UserPageActionType = ReturnType<typeof subscribeAC>\r\n    | ReturnType<typeof unSubscribeAC>\r\n    | ReturnType<typeof setUsersAC>\r\n    | ReturnType<typeof setTotalUsersCountAC>\r\n    | ReturnType<typeof changeCurrentPageAC>\r\n    | preloaderACType\r\n    | ReturnType<typeof toggleFollowingInProgressAC>\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\n\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <span>Social Network</span>\r\n        </header>\r\n    )\r\n}","import {instance} from './apiConfig/apiConfig';\r\n\r\nexport const usersAPI = {\r\n    unSubscribeAPI(id: string) {\r\n        return instance.delete<ResponseType>('follow/' + id)\r\n    },\r\n    subscribe(id: string) {\r\n        return instance.post<ResponseType>('follow/' + id)\r\n    },\r\n    setUsers(page: number, count: number, term: string = '') {\r\n        const par = {page, count, term}\r\n        return instance.get<ResponseGetUsersType>\r\n        ('users', {params: par})\r\n    },\r\n    setFriends() {\r\n        const par = {page: 1, count: 100, friend: true}\r\n        return instance.get<ResponseGetUsersType>\r\n        ('users', {params: par})\r\n    }\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport type ResponseGetUsersType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: string\r\n    uniqueUrlName: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    status: string | null\r\n    followed: boolean\r\n}","export enum enumMessagesActionType {\r\n}\r\n\r\nconst initialState = {\r\n    messagesData: [\r\n        {message: 'Встреча в субботу ещё в силе?', time: '29/04/22 16:52'},\r\n        {message: 'Добрый день! Вы ещё продаете шоги?', time: '28/04/22 17:52'},\r\n        {message: 'Привет! Давно не виделись, как дела?', time: '27/04/22 18:52'},\r\n        {message: 'Вот офер на 3000$, хотите быть у нас джуном?', time: '26/04/22 19:52'},\r\n        {message: 'Тебя точно возьмут на работу!', time: '25/04/22 21:52'},\r\n        {message: 'Какая классная соц сеть у тебя получилась!', time: '24/04/22 20:52'},\r\n\r\n    ],\r\n}\r\nexport const messagesPageReducer = (state: initialStateType = initialState, action: MessageActionType): initialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\n\r\n//type\r\nexport type MessagesPageType = {\r\n    dialogsData: DialogsDataProps[]\r\n    messagesData: MessagesDataProps[]\r\n}\r\nexport type DialogsDataProps = {\r\n    id: string\r\n    name: string\r\n    img: string\r\n}\r\nexport type MessagesDataProps = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\n\r\n//type\r\ntype initialStateType = typeof initialState\r\nexport type MessageActionType = any","import {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport React, {useEffect} from 'react';\r\nimport {UserType} from '../../api/userApi';\r\nimport {setFriendsTC, subscribeTC, unSubscribeTC} from '../../redux/reducer/usersPageReducer';\r\nimport s from './Friends.module.css'\r\n\r\nexport const Friends = () => {\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth)\r\n    const users = useSelector<AppRootStateType, UserType[]>(state => state.userPage.users)\r\n    const dispatch = useDispatch()\r\n    const onClickUnSubHandler = (id: string) => {\r\n        dispatch(unSubscribeTC(id))\r\n    }\r\n    const onClickSubHandler = (id: string) => {\r\n        dispatch(subscribeTC(id))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(setFriendsTC())\r\n    }, [])\r\n    if (!isAuth) return <Redirect to=\"/login\"/>\r\n    return <div className={s.mainContainer}>\r\n        {users.map(t => {\r\n            return (\r\n                <div key={t.id} className={s.friendContainer}>\r\n                    <div className={s.imgContainer}>\r\n                        <NavLink to={'/profile/' + t.id}>\r\n                            <img\r\n                                src={t.photos.small === null\r\n                                    ? 'https://sun1-17.userapi.com/s/v1/if1/pvTi5V3csQH8-oqUnfesELwgtLWyEePqE6Hz5SdqoVZxItBnm_XwfAiDMfANJPjpj7jtW_O5.jpg?size=200x200&quality=96&crop=0,0,979,979&ava=1'\r\n                                    : t.photos.small} alt=\"аватарка пользователей\"\r\n                            />\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className={s.textContainer}>\r\n                        <span>{t.name}</span>\r\n                        <span style={{fontSize: 16}}>\r\n                                    {t.status ? t.status : 'no status'}\r\n                                </span>\r\n                    </div>\r\n                    {t.followed ? <button\r\n\r\n                            onClick={() => onClickUnSubHandler(t.id)}>\r\n                            unfollow\r\n                        </button> :\r\n                        <button\r\n                            onClick={() => onClickSubHandler(t.id)}>follow\r\n                        </button>}\r\n                </div>\r\n            )\r\n        })}\r\n    </div>\r\n}","import React, {useEffect, useState} from 'react';\r\nimport s from './Pagination.module.css'\r\n\r\ntype PaginatorPropsType = {\r\n    totalCount: number\r\n    pageCount: number\r\n    callback: (page: number) => void\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> =\r\n    React.memo(({\r\n                    totalCount,\r\n                    pageCount,\r\n                    callback,\r\n                }) => {\r\n        const [curPage, setCurPage] = useState(1)\r\n        const totalPages = Math.ceil(totalCount / pageCount)\r\n        const pages = [] as number[]\r\n\r\n        function createPages(pages: number[], pagesCount: number, currentPage: number) {\r\n            if (pagesCount > 10) {\r\n                if (currentPage > 5) {\r\n                    for (let i = currentPage - 4; i <= currentPage + 5; i++) {\r\n                        pages.push(i)\r\n                        if (i === pagesCount) break\r\n                    }\r\n                } else {\r\n                    for (let i = 1; i <= 10; i++) {\r\n                        pages.push(i)\r\n                        if (i === pagesCount) break\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 1; i <= pagesCount; i++) {\r\n                    pages.push(i)\r\n                }\r\n            }\r\n        }\r\n\r\n        createPages(pages, totalPages, curPage)\r\n\r\n        const toFirstPage = () => setCurPage(1)\r\n        const toLastPage = () => setCurPage(totalPages)\r\n\r\n        const [test, setTest] = useState<null | number>(null)\r\n        useEffect(() => {\r\n            if (test) {\r\n                callback(curPage)\r\n            }\r\n            setTest(1)\r\n        }, [curPage])\r\n\r\n        return (\r\n            <div className={s.pages}>\r\n                <span onClick={toFirstPage}> {'<<'} </span>\r\n                <span onClick={() => setCurPage(curPage - 1)}>{'<'} </span>\r\n                {pages.map((page, index) => <span\r\n                    key={index}\r\n                    className={curPage === page ? s.currentPage : s.page}\r\n                    onClick={() => setCurPage(page)}>{page} </span>)}\r\n                <span onClick={() => setCurPage(curPage + 1)}> {'>'} </span>\r\n                <span onClick={toLastPage}>{'>>'} </span>\r\n            </div>\r\n        );\r\n    });","import s from './Users.module.css';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Paginator} from '../../common/Paginator/Paginator';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {changeCurrentPageAC, setUsersTC, subscribeTC, unSubscribeTC} from '../../redux/reducer/usersPageReducer';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {UserType} from '../../api/userApi';\r\n\r\nexport const Users = () => {\r\n    const users = useSelector<AppRootStateType, UserType[]>(state => state.userPage.users)\r\n    const totalUsersCount = useSelector<AppRootStateType, number>(state => state.userPage.totalUsersCount)\r\n    const page = useSelector<AppRootStateType, number>(state => state.userPage.currentPage)\r\n    const followingInProgress = useSelector<AppRootStateType, (string | null)[]>(state => state.userPage.followingInProgress)\r\n    const dispatch = useDispatch()\r\n    const onClickUnSubHandler = (id: string) => {\r\n        dispatch(unSubscribeTC(id))\r\n    }\r\n    const onClickSubHandler = (id: string) => {\r\n        dispatch(subscribeTC(id))\r\n    }\r\n    const changeCurrentPageHandler = useCallback((page: number) => {\r\n        dispatch(changeCurrentPageAC(page))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(setUsersTC())\r\n    }, [page])\r\n\r\n    return <div className={s.container}>\r\n        <Paginator totalCount={totalUsersCount} pageCount={10} callback={changeCurrentPageHandler}\r\n        />\r\n        <div className={s.containerUsers}>\r\n            {users.map(t => {\r\n                return (\r\n                    <div className={s.containerUser} key={t.id}>\r\n                        <div className={s.imgAndName}>\r\n                            <div>\r\n                                <NavLink to={'/profile/' + t.id}>\r\n                                    <img\r\n                                        src={t.photos.small === null\r\n                                            ? 'https://sun1-17.userapi.com/s/v1/if1/pvTi5V3csQH8-oqUnfesELwgtLWyEePqE6Hz5SdqoVZxItBnm_XwfAiDMfANJPjpj7jtW_O5.jpg?size=200x200&quality=96&crop=0,0,979,979&ava=1'\r\n                                            : t.photos.small} alt=\"аватарка пользователей\"\r\n                                    />\r\n                                </NavLink>\r\n                            </div>\r\n                            <div className={s.statusAndName}>\r\n                                <span>{t.name}</span>\r\n                                <span style={{fontSize: 16}}>\r\n                                    {t.status ? t.status : 'no status'}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        {t.followed ? <button\r\n                                disabled={followingInProgress.some(id => id === t.id\r\n                                )}\r\n                                onClick={() => onClickUnSubHandler(t.id)}>\r\n                                unfollow\r\n                            </button> :\r\n                            <button\r\n                                disabled={followingInProgress.some(id => id === t.id)}\r\n                                onClick={() => onClickSubHandler(t.id)}>follow\r\n                            </button>}\r\n                    </div>\r\n\r\n                )\r\n            })}\r\n        </div>\r\n    </div>\r\n}","import React, {useEffect} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setFriendsTC} from '../../redux/reducer/usersPageReducer';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {UserType} from '../../api/userApi';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nexport const Dialogs = () => {\r\n    const dispatch = useDispatch()\r\n    const users = useSelector<AppRootStateType, UserType[]>(state => state.userPage.users)\r\n    let usersForDialogs: UserTypeMessage[] = users.slice(0, 6)\r\n    const messages = useSelector<AppRootStateType, { message: string, time: string }[]>(state => state.messages.messagesData)\r\n    for (let i = 0; i < 6; i++) {\r\n        usersForDialogs[i] = {...usersForDialogs[i], message: messages[i].message, time: messages[i].time}\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(setFriendsTC())\r\n    },[])\r\n\r\n    return (\r\n        <>\r\n            {usersForDialogs.map(t => {\r\n                return (<div className={s.mainContainer} key={t.id}>\r\n                    <div className={s.contentContainer}>\r\n                        <div className={s.imgContainer}>\r\n                            <NavLink to={'/profile/' + t.id}><img\r\n                                src={t.photos?.small ? t.photos.small : 'https://sun1-17.userapi.com/s/v1/if1/pvTi5V3csQH8-oqUnfesELwgtLWyEePqE6Hz5SdqoVZxItBnm_XwfAiDMfANJPjpj7jtW_O5.jpg?size=200x200&quality=96&crop=0,0,979,979&ava=1'}\r\n                                alt=\"Photo uf user\"/></NavLink>\r\n                            <span>{t.name}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.textContainer}>\r\n                        <span>{t.message}</span>\r\n                        <span className={s.time}>{t.time}</span>\r\n                    </div>\r\n                </div>)\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport type UserTypeMessage = {\r\n    name: string\r\n    id: string\r\n    uniqueUrlName: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    status: string | null\r\n    followed: boolean\r\n    message?: string | null\r\n    time?: string | null\r\n}","import React from 'react';\r\nimport s from './App.module.css';\r\nimport {Navbar} from './components/Navbar/Navbar';\r\nimport {Route, withRouter} from 'react-router-dom';\r\nimport {AppRootStateType} from './redux/store';\r\nimport ProfileContainer from './components/Profile/ProfileConteiner';\r\nimport Login from './components/Login/Login';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {initializeTC} from './redux/reducer/appReducer';\r\nimport {Preloader} from './common/Preloader/Preloader';\r\nimport {Header} from './components/Header/Header';\r\nimport {Friends} from './components/Friends/Friends';\r\nimport {Users} from './components/Users/Users';\r\nimport {Dialogs} from './components/Dialogs/Dialogs';\r\n\r\nclass App extends React.PureComponent<AppPropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeTC()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) return <Preloader/>\r\n        return (\r\n            <div className={s.allContainer}>\r\n                <Header/>\r\n                <div className={s.mainContainer}>\r\n                    <Navbar/>\r\n                    <div className={s.contentContainer}>\r\n                        <Route path=\"/dialogs\" render={() => <Dialogs/>}/>\r\n                        <Route exact path=\"/\" render={() => <ProfileContainer/>}/>\r\n                        <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                        <Route path=\"/users\" render={() => <Users/>}/>\r\n                        <Route path=\"/login\" render={() => <Login/>}/>\r\n                        <Route path=\"/friends\" render={() => <Friends/>}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ntype AppPropsType = {\r\n    initializeTC: () => void\r\n    initialized: boolean\r\n}\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        initialized: state.AppReducer.initialized,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {initializeTC}), withRouter)(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {MessageActionType, messagesPageReducer} from './reducer/messagesPageReducer';\r\nimport {ProfileActionType, profilePageReducer} from './reducer/profilePageReducer';\r\nimport {UserPageActionType, usersPageReducer} from './reducer/usersPageReducer';\r\nimport {authReducer, LoginActionType} from './reducer/authReducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {CommonActionType, commonReducer} from '../common/commonReducer';\r\nimport {AppReducer, AppReducerActionType} from './reducer/appReducer';\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    messages: messagesPageReducer,\r\n    profile: profilePageReducer,\r\n    userPage: usersPageReducer,\r\n    login: authReducer,\r\n    common: commonReducer,\r\n    AppReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionType =\r\n    | MessageActionType\r\n    | ProfileActionType\r\n    | CommonActionType\r\n    | LoginActionType\r\n    | UserPageActionType\r\n    | AppReducerActionType\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from './redux/store';\r\nimport {Provider} from 'react-redux';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter><Provider store={store}>\r\n        <App/>\r\n    </Provider></BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1tzDp\",\"active\":\"Navbar_active__2uMtm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"ProfileInfo_mainContainer__3j7O7\",\"profileImgContainer\":\"ProfileInfo_profileImgContainer__1fJQT\",\"nameContainer\":\"ProfileInfo_nameContainer__3RfvT\",\"fileInput\":\"ProfileInfo_fileInput__2L_ui\",\"button\":\"ProfileInfo_button__3uaCr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Users_container__iEjx_\",\"containerUsers\":\"Users_containerUsers__gbPN0\",\"containerUser\":\"Users_containerUser__2jjAV\",\"imgAndName\":\"Users_imgAndName__3yKAQ\",\"statusAndName\":\"Users_statusAndName__Gs-zP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Dialogs_mainContainer__QlxcU\",\"contentContainer\":\"Dialogs_contentContainer__1ww0O\",\"imgContainer\":\"Dialogs_imgContainer__22Ytq\",\"timeContainer\":\"Dialogs_timeContainer__2qtEO\",\"textContainer\":\"Dialogs_textContainer__sY_FZ\",\"time\":\"Dialogs_time__1oBBZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"MyPost_mainContainer__3kFTJ\",\"newPostContainer\":\"MyPost_newPostContainer__2hAHN\",\"formContainer\":\"MyPost_formContainer__23NBj\",\"posts\":\"MyPost_posts__B2XNC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Friends_mainContainer__1BJw6\",\"friendContainer\":\"Friends_friendContainer__1piQZ\",\"imgContainer\":\"Friends_imgContainer__32NKR\",\"textContainer\":\"Friends_textContainer__36F30\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allContainer\":\"App_allContainer__2DW9Q\",\"mainContainer\":\"App_mainContainer__32gD_\",\"contentContainer\":\"App_contentContainer__26wrs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Pagination_pages__25KpY\",\"currentPage\":\"Pagination_currentPage__1WNWN\",\"page\":\"Pagination_page__X0MDs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Contacts_mainContainer__oG1gv\",\"infoContainer\":\"Contacts_infoContainer__kAqOu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Profile_mainContainer__1eiNj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Settings_mainContainer__2Z2x2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Post_mainContainer__1o5Er\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.087f5d2f.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allContainer\":\"Login_allContainer__aSMRf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2mujF\"};"],"sourceRoot":""}